package com.zhilian.rf_qims.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhilian.rf_qims.entity.AreaMes;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AREA_MES".
*/
public class AreaMesDao extends AbstractDao<AreaMes, Long> {

    public static final String TABLENAME = "AREA_MES";

    /**
     * Properties of entity AreaMes.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Fid = new Property(1, int.class, "fid", false, "FID");
        public final static Property Status = new Property(2, int.class, "status", false, "STATUS");
        public final static Property Level = new Property(3, int.class, "level", false, "LEVEL");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
    }


    public AreaMesDao(DaoConfig config) {
        super(config);
    }
    
    public AreaMesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AREA_MES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"FID\" INTEGER NOT NULL ," + // 1: fid
                "\"STATUS\" INTEGER NOT NULL ," + // 2: status
                "\"LEVEL\" INTEGER NOT NULL ," + // 3: level
                "\"NAME\" TEXT);"); // 4: name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AREA_MES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AreaMes entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getFid());
        stmt.bindLong(3, entity.getStatus());
        stmt.bindLong(4, entity.getLevel());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AreaMes entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getFid());
        stmt.bindLong(3, entity.getStatus());
        stmt.bindLong(4, entity.getLevel());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public AreaMes readEntity(Cursor cursor, int offset) {
        AreaMes entity = new AreaMes( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // fid
            cursor.getInt(offset + 2), // status
            cursor.getInt(offset + 3), // level
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AreaMes entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setFid(cursor.getInt(offset + 1));
        entity.setStatus(cursor.getInt(offset + 2));
        entity.setLevel(cursor.getInt(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AreaMes entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AreaMes entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AreaMes entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
