package com.zhilian.rf_qims.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhilian.rf_qims.entity.Project;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROJECT".
*/
public class ProjectDao extends AbstractDao<Project, Long> {

    public static final String TABLENAME = "PROJECT";

    /**
     * Properties of entity Project.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ItemCode = new Property(1, String.class, "itemCode", false, "ITEM_CODE");
        public final static Property ProjectCode = new Property(2, String.class, "projectCode", false, "PROJECT_CODE");
        public final static Property EntrustId = new Property(3, long.class, "entrustId", false, "ENTRUST_ID");
        public final static Property ItemName = new Property(4, String.class, "itemName", false, "ITEM_NAME");
        public final static Property ProjectAddr = new Property(5, String.class, "projectAddr", false, "PROJECT_ADDR");
        public final static Property SampleSource = new Property(6, String.class, "sampleSource", false, "SAMPLE_SOURCE");
        public final static Property AreaId = new Property(7, long.class, "areaId", false, "AREA_ID");
        public final static Property AcceptDate = new Property(8, String.class, "acceptDate", false, "ACCEPT_DATE");
        public final static Property CommissionShape = new Property(9, String.class, "commissionShape", false, "COMMISSION_SHAPE");
        public final static Property WitnessUnit = new Property(10, String.class, "witnessUnit", false, "WITNESS_UNIT");
        public final static Property WitnessUnitPhone = new Property(11, String.class, "witnessUnitPhone", false, "WITNESS_UNIT_PHONE");
        public final static Property Witness = new Property(12, String.class, "witness", false, "WITNESS");
        public final static Property WitnessPhone = new Property(13, String.class, "witnessPhone", false, "WITNESS_PHONE");
        public final static Property Sender = new Property(14, String.class, "sender", false, "SENDER");
        public final static Property SenderPhone = new Property(15, String.class, "senderPhone", false, "SENDER_PHONE");
        public final static Property Acceptor = new Property(16, String.class, "acceptor", false, "ACCEPTOR");
        public final static Property SupervisionUnit = new Property(17, String.class, "supervisionUnit", false, "SUPERVISION_UNIT");
        public final static Property Supervisor = new Property(18, String.class, "supervisor", false, "SUPERVISOR");
        public final static Property CommissionCategory = new Property(19, String.class, "commissionCategory", false, "COMMISSION_CATEGORY");
        public final static Property Secret = new Property(20, String.class, "secret", false, "SECRET");
        public final static Property Status = new Property(21, int.class, "status", false, "STATUS");
        public final static Property Desc = new Property(22, String.class, "desc", false, "DESC");
        public final static Property Isselected = new Property(23, Integer.class, "isselected", false, "ISSELECTED");
    }


    public ProjectDao(DaoConfig config) {
        super(config);
    }
    
    public ProjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROJECT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ITEM_CODE\" TEXT," + // 1: itemCode
                "\"PROJECT_CODE\" TEXT," + // 2: projectCode
                "\"ENTRUST_ID\" INTEGER NOT NULL ," + // 3: entrustId
                "\"ITEM_NAME\" TEXT," + // 4: itemName
                "\"PROJECT_ADDR\" TEXT," + // 5: projectAddr
                "\"SAMPLE_SOURCE\" TEXT," + // 6: sampleSource
                "\"AREA_ID\" INTEGER NOT NULL ," + // 7: areaId
                "\"ACCEPT_DATE\" TEXT," + // 8: acceptDate
                "\"COMMISSION_SHAPE\" TEXT," + // 9: commissionShape
                "\"WITNESS_UNIT\" TEXT," + // 10: witnessUnit
                "\"WITNESS_UNIT_PHONE\" TEXT," + // 11: witnessUnitPhone
                "\"WITNESS\" TEXT," + // 12: witness
                "\"WITNESS_PHONE\" TEXT," + // 13: witnessPhone
                "\"SENDER\" TEXT," + // 14: sender
                "\"SENDER_PHONE\" TEXT," + // 15: senderPhone
                "\"ACCEPTOR\" TEXT," + // 16: acceptor
                "\"SUPERVISION_UNIT\" TEXT," + // 17: supervisionUnit
                "\"SUPERVISOR\" TEXT," + // 18: supervisor
                "\"COMMISSION_CATEGORY\" TEXT," + // 19: commissionCategory
                "\"SECRET\" TEXT," + // 20: secret
                "\"STATUS\" INTEGER NOT NULL ," + // 21: status
                "\"DESC\" TEXT," + // 22: desc
                "\"ISSELECTED\" INTEGER);"); // 23: isselected
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROJECT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Project entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String itemCode = entity.getItemCode();
        if (itemCode != null) {
            stmt.bindString(2, itemCode);
        }
 
        String projectCode = entity.getProjectCode();
        if (projectCode != null) {
            stmt.bindString(3, projectCode);
        }
        stmt.bindLong(4, entity.getEntrustId());
 
        String itemName = entity.getItemName();
        if (itemName != null) {
            stmt.bindString(5, itemName);
        }
 
        String projectAddr = entity.getProjectAddr();
        if (projectAddr != null) {
            stmt.bindString(6, projectAddr);
        }
 
        String sampleSource = entity.getSampleSource();
        if (sampleSource != null) {
            stmt.bindString(7, sampleSource);
        }
        stmt.bindLong(8, entity.getAreaId());
 
        String acceptDate = entity.getAcceptDate();
        if (acceptDate != null) {
            stmt.bindString(9, acceptDate);
        }
 
        String commissionShape = entity.getCommissionShape();
        if (commissionShape != null) {
            stmt.bindString(10, commissionShape);
        }
 
        String witnessUnit = entity.getWitnessUnit();
        if (witnessUnit != null) {
            stmt.bindString(11, witnessUnit);
        }
 
        String witnessUnitPhone = entity.getWitnessUnitPhone();
        if (witnessUnitPhone != null) {
            stmt.bindString(12, witnessUnitPhone);
        }
 
        String witness = entity.getWitness();
        if (witness != null) {
            stmt.bindString(13, witness);
        }
 
        String witnessPhone = entity.getWitnessPhone();
        if (witnessPhone != null) {
            stmt.bindString(14, witnessPhone);
        }
 
        String sender = entity.getSender();
        if (sender != null) {
            stmt.bindString(15, sender);
        }
 
        String senderPhone = entity.getSenderPhone();
        if (senderPhone != null) {
            stmt.bindString(16, senderPhone);
        }
 
        String acceptor = entity.getAcceptor();
        if (acceptor != null) {
            stmt.bindString(17, acceptor);
        }
 
        String supervisionUnit = entity.getSupervisionUnit();
        if (supervisionUnit != null) {
            stmt.bindString(18, supervisionUnit);
        }
 
        String supervisor = entity.getSupervisor();
        if (supervisor != null) {
            stmt.bindString(19, supervisor);
        }
 
        String commissionCategory = entity.getCommissionCategory();
        if (commissionCategory != null) {
            stmt.bindString(20, commissionCategory);
        }
 
        String secret = entity.getSecret();
        if (secret != null) {
            stmt.bindString(21, secret);
        }
        stmt.bindLong(22, entity.getStatus());
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(23, desc);
        }
 
        Integer isselected = entity.getIsselected();
        if (isselected != null) {
            stmt.bindLong(24, isselected);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Project entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String itemCode = entity.getItemCode();
        if (itemCode != null) {
            stmt.bindString(2, itemCode);
        }
 
        String projectCode = entity.getProjectCode();
        if (projectCode != null) {
            stmt.bindString(3, projectCode);
        }
        stmt.bindLong(4, entity.getEntrustId());
 
        String itemName = entity.getItemName();
        if (itemName != null) {
            stmt.bindString(5, itemName);
        }
 
        String projectAddr = entity.getProjectAddr();
        if (projectAddr != null) {
            stmt.bindString(6, projectAddr);
        }
 
        String sampleSource = entity.getSampleSource();
        if (sampleSource != null) {
            stmt.bindString(7, sampleSource);
        }
        stmt.bindLong(8, entity.getAreaId());
 
        String acceptDate = entity.getAcceptDate();
        if (acceptDate != null) {
            stmt.bindString(9, acceptDate);
        }
 
        String commissionShape = entity.getCommissionShape();
        if (commissionShape != null) {
            stmt.bindString(10, commissionShape);
        }
 
        String witnessUnit = entity.getWitnessUnit();
        if (witnessUnit != null) {
            stmt.bindString(11, witnessUnit);
        }
 
        String witnessUnitPhone = entity.getWitnessUnitPhone();
        if (witnessUnitPhone != null) {
            stmt.bindString(12, witnessUnitPhone);
        }
 
        String witness = entity.getWitness();
        if (witness != null) {
            stmt.bindString(13, witness);
        }
 
        String witnessPhone = entity.getWitnessPhone();
        if (witnessPhone != null) {
            stmt.bindString(14, witnessPhone);
        }
 
        String sender = entity.getSender();
        if (sender != null) {
            stmt.bindString(15, sender);
        }
 
        String senderPhone = entity.getSenderPhone();
        if (senderPhone != null) {
            stmt.bindString(16, senderPhone);
        }
 
        String acceptor = entity.getAcceptor();
        if (acceptor != null) {
            stmt.bindString(17, acceptor);
        }
 
        String supervisionUnit = entity.getSupervisionUnit();
        if (supervisionUnit != null) {
            stmt.bindString(18, supervisionUnit);
        }
 
        String supervisor = entity.getSupervisor();
        if (supervisor != null) {
            stmt.bindString(19, supervisor);
        }
 
        String commissionCategory = entity.getCommissionCategory();
        if (commissionCategory != null) {
            stmt.bindString(20, commissionCategory);
        }
 
        String secret = entity.getSecret();
        if (secret != null) {
            stmt.bindString(21, secret);
        }
        stmt.bindLong(22, entity.getStatus());
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(23, desc);
        }
 
        Integer isselected = entity.getIsselected();
        if (isselected != null) {
            stmt.bindLong(24, isselected);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Project readEntity(Cursor cursor, int offset) {
        Project entity = new Project( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // itemCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // projectCode
            cursor.getLong(offset + 3), // entrustId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // itemName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // projectAddr
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sampleSource
            cursor.getLong(offset + 7), // areaId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // acceptDate
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // commissionShape
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // witnessUnit
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // witnessUnitPhone
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // witness
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // witnessPhone
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // sender
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // senderPhone
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // acceptor
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // supervisionUnit
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // supervisor
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // commissionCategory
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // secret
            cursor.getInt(offset + 21), // status
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // desc
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23) // isselected
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Project entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setItemCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProjectCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEntrustId(cursor.getLong(offset + 3));
        entity.setItemName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProjectAddr(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSampleSource(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAreaId(cursor.getLong(offset + 7));
        entity.setAcceptDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCommissionShape(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setWitnessUnit(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setWitnessUnitPhone(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setWitness(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setWitnessPhone(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSender(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSenderPhone(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setAcceptor(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSupervisionUnit(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setSupervisor(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCommissionCategory(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setSecret(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setStatus(cursor.getInt(offset + 21));
        entity.setDesc(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setIsselected(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Project entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Project entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Project entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
