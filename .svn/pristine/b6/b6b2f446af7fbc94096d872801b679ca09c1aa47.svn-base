package com.zhilian.rf_qims.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhilian.rf_qims.entity.InsQuality;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INS_QUALITY".
*/
public class InsQualityDao extends AbstractDao<InsQuality, Long> {

    public static final String TABLENAME = "INS_QUALITY";

    /**
     * Properties of entity InsQuality.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Rid = new Property(1, long.class, "rid", false, "RID");
        public final static Property Czd = new Property(2, String.class, "czd", false, "CZD");
        public final static Property Zyxn = new Property(3, String.class, "zyxn", false, "ZYXN");
        public final static Property Thm = new Property(4, String.class, "thm", false, "THM");
        public final static Property Xbm = new Property(5, String.class, "xbm", false, "XBM");
    }


    public InsQualityDao(DaoConfig config) {
        super(config);
    }
    
    public InsQualityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INS_QUALITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"RID\" INTEGER NOT NULL ," + // 1: rid
                "\"CZD\" TEXT," + // 2: czd
                "\"ZYXN\" TEXT," + // 3: zyxn
                "\"THM\" TEXT," + // 4: thm
                "\"XBM\" TEXT);"); // 5: xbm
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INS_QUALITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, InsQuality entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getRid());
 
        String czd = entity.getCzd();
        if (czd != null) {
            stmt.bindString(3, czd);
        }
 
        String zyxn = entity.getZyxn();
        if (zyxn != null) {
            stmt.bindString(4, zyxn);
        }
 
        String thm = entity.getThm();
        if (thm != null) {
            stmt.bindString(5, thm);
        }
 
        String xbm = entity.getXbm();
        if (xbm != null) {
            stmt.bindString(6, xbm);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, InsQuality entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getRid());
 
        String czd = entity.getCzd();
        if (czd != null) {
            stmt.bindString(3, czd);
        }
 
        String zyxn = entity.getZyxn();
        if (zyxn != null) {
            stmt.bindString(4, zyxn);
        }
 
        String thm = entity.getThm();
        if (thm != null) {
            stmt.bindString(5, thm);
        }
 
        String xbm = entity.getXbm();
        if (xbm != null) {
            stmt.bindString(6, xbm);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public InsQuality readEntity(Cursor cursor, int offset) {
        InsQuality entity = new InsQuality( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // rid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // czd
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // zyxn
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // thm
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // xbm
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, InsQuality entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setRid(cursor.getLong(offset + 1));
        entity.setCzd(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setZyxn(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setThm(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setXbm(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(InsQuality entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(InsQuality entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(InsQuality entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
