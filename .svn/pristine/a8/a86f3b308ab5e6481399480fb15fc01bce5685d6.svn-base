package com.zhilian.rf_qims.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhilian.rf_qims.entity.SampleOriginal;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SAMPLE_ORIGINAL".
*/
public class SampleOriginalDao extends AbstractDao<SampleOriginal, Long> {

    public static final String TABLENAME = "SAMPLE_ORIGINAL";

    /**
     * Properties of entity SampleOriginal.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Sid = new Property(1, long.class, "sid", false, "SID");
        public final static Property Number = new Property(2, String.class, "number", false, "NUMBER");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property Smode = new Property(4, String.class, "smode", false, "SMODE");
        public final static Property Unit = new Property(5, String.class, "unit", false, "UNIT");
        public final static Property ItemName = new Property(6, String.class, "itemName", false, "ITEM_NAME");
        public final static Property ProductionDate = new Property(7, String.class, "productionDate", false, "PRODUCTION_DATE");
        public final static Property CategotyCode = new Property(8, String.class, "categotyCode", false, "CATEGOTY_CODE");
        public final static Property TestDate = new Property(9, String.class, "testDate", false, "TEST_DATE");
        public final static Property Door_frame_height = new Property(10, String.class, "door_frame_height", false, "DOOR_FRAME_HEIGHT");
        public final static Property Door_frame_width = new Property(11, String.class, "door_frame_width", false, "DOOR_FRAME_WIDTH");
        public final static Property Door_leaf_width = new Property(12, String.class, "door_leaf_width", false, "DOOR_LEAF_WIDTH");
        public final static Property Door_leaf_height = new Property(13, String.class, "door_leaf_height", false, "DOOR_LEAF_HEIGHT");
        public final static Property Door_leaf_thickness = new Property(14, String.class, "door_leaf_thickness", false, "DOOR_LEAF_THICKNESS");
        public final static Property BattenHeight = new Property(15, String.class, "battenHeight", false, "BATTEN_HEIGHT");
        public final static Property HangingPlateWidth = new Property(16, String.class, "hangingPlateWidth", false, "HANGING_PLATE_WIDTH");
        public final static Property HangingPlateWidthCenter = new Property(17, String.class, "hangingPlateWidthCenter", false, "HANGING_PLATE_WIDTH_CENTER");
        public final static Property HangingPlateWidthBottom = new Property(18, String.class, "hangingPlateWidthBottom", false, "HANGING_PLATE_WIDTH_BOTTOM");
        public final static Property HangingPlateHeight = new Property(19, String.class, "hangingPlateHeight", false, "HANGING_PLATE_HEIGHT");
        public final static Property HangingPlateHeightCenter = new Property(20, String.class, "hangingPlateHeightCenter", false, "HANGING_PLATE_HEIGHT_CENTER");
        public final static Property HangingPlateHeightBottom = new Property(21, String.class, "hangingPlateHeightBottom", false, "HANGING_PLATE_HEIGHT_BOTTOM");
        public final static Property HingepageShaftDiameter = new Property(22, String.class, "hingepageShaftDiameter", false, "HINGEPAGE_SHAFT_DIAMETER");
        public final static Property HingepageHoleDiameter = new Property(23, String.class, "hingepageHoleDiameter", false, "HINGEPAGE_HOLE_DIAMETER");
        public final static Property AtresiaShaftDiameter = new Property(24, String.class, "atresiaShaftDiameter", false, "ATRESIA_SHAFT_DIAMETER");
        public final static Property AtresiaHoleDiameter = new Property(25, String.class, "atresiaHoleDiameter", false, "ATRESIA_HOLE_DIAMETER");
        public final static Property DoorframeSteelThick = new Property(26, String.class, "doorframeSteelThick", false, "DOORFRAME_STEEL_THICK");
        public final static Property SteelPlatePositive = new Property(27, String.class, "steelPlatePositive", false, "STEEL_PLATE_POSITIVE");
        public final static Property SteelPlateOpposite = new Property(28, String.class, "steelPlateOpposite", false, "STEEL_PLATE_OPPOSITE");
        public final static Property LegHeightAcross = new Property(29, String.class, "legHeightAcross", false, "LEG_HEIGHT_ACROSS");
        public final static Property Strength = new Property(30, String.class, "strength", false, "STRENGTH");
        public final static Property SteelbarProtectThick = new Property(31, String.class, "steelbarProtectThick", false, "STEELBAR_PROTECT_THICK");
        public final static Property SteelbarSpacing = new Property(32, String.class, "steelbarSpacing", false, "STEELBAR_SPACING");
        public final static Property BarDiameterDesignValue = new Property(33, String.class, "barDiameterDesignValue", false, "BAR_DIAMETER_DESIGN_VALUE");
        public final static Property DoorLeafBaseVentWidth = new Property(34, String.class, "doorLeafBaseVentWidth", false, "DOOR_LEAF_BASE_VENT_WIDTH");
        public final static Property DoorLeafBaseVentHeight = new Property(35, String.class, "doorLeafBaseVentHeight", false, "DOOR_LEAF_BASE_VENT_HEIGHT");
        public final static Property HangingPlateThicknessTop = new Property(36, String.class, "hangingPlateThicknessTop", false, "HANGING_PLATE_THICKNESS_TOP");
        public final static Property HangingPlateThicknessBottom = new Property(37, String.class, "hangingPlateThicknessBottom", false, "HANGING_PLATE_THICKNESS_BOTTOM");
        public final static Property SteelPlantThickness = new Property(38, String.class, "steelPlantThickness", false, "STEEL_PLANT_THICKNESS");
        public final static Property Equivalent_pipe_diameter = new Property(39, String.class, "equivalent_pipe_diameter", false, "EQUIVALENT_PIPE_DIAMETER");
    }


    public SampleOriginalDao(DaoConfig config) {
        super(config);
    }
    
    public SampleOriginalDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SAMPLE_ORIGINAL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SID\" INTEGER NOT NULL ," + // 1: sid
                "\"NUMBER\" TEXT," + // 2: number
                "\"TYPE\" TEXT," + // 3: type
                "\"SMODE\" TEXT," + // 4: smode
                "\"UNIT\" TEXT," + // 5: unit
                "\"ITEM_NAME\" TEXT," + // 6: itemName
                "\"PRODUCTION_DATE\" TEXT," + // 7: productionDate
                "\"CATEGOTY_CODE\" TEXT," + // 8: categotyCode
                "\"TEST_DATE\" TEXT," + // 9: testDate
                "\"DOOR_FRAME_HEIGHT\" TEXT," + // 10: door_frame_height
                "\"DOOR_FRAME_WIDTH\" TEXT," + // 11: door_frame_width
                "\"DOOR_LEAF_WIDTH\" TEXT," + // 12: door_leaf_width
                "\"DOOR_LEAF_HEIGHT\" TEXT," + // 13: door_leaf_height
                "\"DOOR_LEAF_THICKNESS\" TEXT," + // 14: door_leaf_thickness
                "\"BATTEN_HEIGHT\" TEXT," + // 15: battenHeight
                "\"HANGING_PLATE_WIDTH\" TEXT," + // 16: hangingPlateWidth
                "\"HANGING_PLATE_WIDTH_CENTER\" TEXT," + // 17: hangingPlateWidthCenter
                "\"HANGING_PLATE_WIDTH_BOTTOM\" TEXT," + // 18: hangingPlateWidthBottom
                "\"HANGING_PLATE_HEIGHT\" TEXT," + // 19: hangingPlateHeight
                "\"HANGING_PLATE_HEIGHT_CENTER\" TEXT," + // 20: hangingPlateHeightCenter
                "\"HANGING_PLATE_HEIGHT_BOTTOM\" TEXT," + // 21: hangingPlateHeightBottom
                "\"HINGEPAGE_SHAFT_DIAMETER\" TEXT," + // 22: hingepageShaftDiameter
                "\"HINGEPAGE_HOLE_DIAMETER\" TEXT," + // 23: hingepageHoleDiameter
                "\"ATRESIA_SHAFT_DIAMETER\" TEXT," + // 24: atresiaShaftDiameter
                "\"ATRESIA_HOLE_DIAMETER\" TEXT," + // 25: atresiaHoleDiameter
                "\"DOORFRAME_STEEL_THICK\" TEXT," + // 26: doorframeSteelThick
                "\"STEEL_PLATE_POSITIVE\" TEXT," + // 27: steelPlatePositive
                "\"STEEL_PLATE_OPPOSITE\" TEXT," + // 28: steelPlateOpposite
                "\"LEG_HEIGHT_ACROSS\" TEXT," + // 29: legHeightAcross
                "\"STRENGTH\" TEXT," + // 30: strength
                "\"STEELBAR_PROTECT_THICK\" TEXT," + // 31: steelbarProtectThick
                "\"STEELBAR_SPACING\" TEXT," + // 32: steelbarSpacing
                "\"BAR_DIAMETER_DESIGN_VALUE\" TEXT," + // 33: barDiameterDesignValue
                "\"DOOR_LEAF_BASE_VENT_WIDTH\" TEXT," + // 34: doorLeafBaseVentWidth
                "\"DOOR_LEAF_BASE_VENT_HEIGHT\" TEXT," + // 35: doorLeafBaseVentHeight
                "\"HANGING_PLATE_THICKNESS_TOP\" TEXT," + // 36: hangingPlateThicknessTop
                "\"HANGING_PLATE_THICKNESS_BOTTOM\" TEXT," + // 37: hangingPlateThicknessBottom
                "\"STEEL_PLANT_THICKNESS\" TEXT," + // 38: steelPlantThickness
                "\"EQUIVALENT_PIPE_DIAMETER\" TEXT);"); // 39: equivalent_pipe_diameter
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SAMPLE_ORIGINAL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SampleOriginal entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSid());
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(3, number);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String smode = entity.getSmode();
        if (smode != null) {
            stmt.bindString(5, smode);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(6, unit);
        }
 
        String itemName = entity.getItemName();
        if (itemName != null) {
            stmt.bindString(7, itemName);
        }
 
        String productionDate = entity.getProductionDate();
        if (productionDate != null) {
            stmt.bindString(8, productionDate);
        }
 
        String categotyCode = entity.getCategotyCode();
        if (categotyCode != null) {
            stmt.bindString(9, categotyCode);
        }
 
        String testDate = entity.getTestDate();
        if (testDate != null) {
            stmt.bindString(10, testDate);
        }
 
        String door_frame_height = entity.getDoor_frame_height();
        if (door_frame_height != null) {
            stmt.bindString(11, door_frame_height);
        }
 
        String door_frame_width = entity.getDoor_frame_width();
        if (door_frame_width != null) {
            stmt.bindString(12, door_frame_width);
        }
 
        String door_leaf_width = entity.getDoor_leaf_width();
        if (door_leaf_width != null) {
            stmt.bindString(13, door_leaf_width);
        }
 
        String door_leaf_height = entity.getDoor_leaf_height();
        if (door_leaf_height != null) {
            stmt.bindString(14, door_leaf_height);
        }
 
        String door_leaf_thickness = entity.getDoor_leaf_thickness();
        if (door_leaf_thickness != null) {
            stmt.bindString(15, door_leaf_thickness);
        }
 
        String battenHeight = entity.getBattenHeight();
        if (battenHeight != null) {
            stmt.bindString(16, battenHeight);
        }
 
        String hangingPlateWidth = entity.getHangingPlateWidth();
        if (hangingPlateWidth != null) {
            stmt.bindString(17, hangingPlateWidth);
        }
 
        String hangingPlateWidthCenter = entity.getHangingPlateWidthCenter();
        if (hangingPlateWidthCenter != null) {
            stmt.bindString(18, hangingPlateWidthCenter);
        }
 
        String hangingPlateWidthBottom = entity.getHangingPlateWidthBottom();
        if (hangingPlateWidthBottom != null) {
            stmt.bindString(19, hangingPlateWidthBottom);
        }
 
        String hangingPlateHeight = entity.getHangingPlateHeight();
        if (hangingPlateHeight != null) {
            stmt.bindString(20, hangingPlateHeight);
        }
 
        String hangingPlateHeightCenter = entity.getHangingPlateHeightCenter();
        if (hangingPlateHeightCenter != null) {
            stmt.bindString(21, hangingPlateHeightCenter);
        }
 
        String hangingPlateHeightBottom = entity.getHangingPlateHeightBottom();
        if (hangingPlateHeightBottom != null) {
            stmt.bindString(22, hangingPlateHeightBottom);
        }
 
        String hingepageShaftDiameter = entity.getHingepageShaftDiameter();
        if (hingepageShaftDiameter != null) {
            stmt.bindString(23, hingepageShaftDiameter);
        }
 
        String hingepageHoleDiameter = entity.getHingepageHoleDiameter();
        if (hingepageHoleDiameter != null) {
            stmt.bindString(24, hingepageHoleDiameter);
        }
 
        String atresiaShaftDiameter = entity.getAtresiaShaftDiameter();
        if (atresiaShaftDiameter != null) {
            stmt.bindString(25, atresiaShaftDiameter);
        }
 
        String atresiaHoleDiameter = entity.getAtresiaHoleDiameter();
        if (atresiaHoleDiameter != null) {
            stmt.bindString(26, atresiaHoleDiameter);
        }
 
        String doorframeSteelThick = entity.getDoorframeSteelThick();
        if (doorframeSteelThick != null) {
            stmt.bindString(27, doorframeSteelThick);
        }
 
        String steelPlatePositive = entity.getSteelPlatePositive();
        if (steelPlatePositive != null) {
            stmt.bindString(28, steelPlatePositive);
        }
 
        String steelPlateOpposite = entity.getSteelPlateOpposite();
        if (steelPlateOpposite != null) {
            stmt.bindString(29, steelPlateOpposite);
        }
 
        String legHeightAcross = entity.getLegHeightAcross();
        if (legHeightAcross != null) {
            stmt.bindString(30, legHeightAcross);
        }
 
        String strength = entity.getStrength();
        if (strength != null) {
            stmt.bindString(31, strength);
        }
 
        String steelbarProtectThick = entity.getSteelbarProtectThick();
        if (steelbarProtectThick != null) {
            stmt.bindString(32, steelbarProtectThick);
        }
 
        String steelbarSpacing = entity.getSteelbarSpacing();
        if (steelbarSpacing != null) {
            stmt.bindString(33, steelbarSpacing);
        }
 
        String barDiameterDesignValue = entity.getBarDiameterDesignValue();
        if (barDiameterDesignValue != null) {
            stmt.bindString(34, barDiameterDesignValue);
        }
 
        String doorLeafBaseVentWidth = entity.getDoorLeafBaseVentWidth();
        if (doorLeafBaseVentWidth != null) {
            stmt.bindString(35, doorLeafBaseVentWidth);
        }
 
        String doorLeafBaseVentHeight = entity.getDoorLeafBaseVentHeight();
        if (doorLeafBaseVentHeight != null) {
            stmt.bindString(36, doorLeafBaseVentHeight);
        }
 
        String hangingPlateThicknessTop = entity.getHangingPlateThicknessTop();
        if (hangingPlateThicknessTop != null) {
            stmt.bindString(37, hangingPlateThicknessTop);
        }
 
        String hangingPlateThicknessBottom = entity.getHangingPlateThicknessBottom();
        if (hangingPlateThicknessBottom != null) {
            stmt.bindString(38, hangingPlateThicknessBottom);
        }
 
        String steelPlantThickness = entity.getSteelPlantThickness();
        if (steelPlantThickness != null) {
            stmt.bindString(39, steelPlantThickness);
        }
 
        String equivalent_pipe_diameter = entity.getEquivalent_pipe_diameter();
        if (equivalent_pipe_diameter != null) {
            stmt.bindString(40, equivalent_pipe_diameter);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SampleOriginal entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSid());
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(3, number);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String smode = entity.getSmode();
        if (smode != null) {
            stmt.bindString(5, smode);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(6, unit);
        }
 
        String itemName = entity.getItemName();
        if (itemName != null) {
            stmt.bindString(7, itemName);
        }
 
        String productionDate = entity.getProductionDate();
        if (productionDate != null) {
            stmt.bindString(8, productionDate);
        }
 
        String categotyCode = entity.getCategotyCode();
        if (categotyCode != null) {
            stmt.bindString(9, categotyCode);
        }
 
        String testDate = entity.getTestDate();
        if (testDate != null) {
            stmt.bindString(10, testDate);
        }
 
        String door_frame_height = entity.getDoor_frame_height();
        if (door_frame_height != null) {
            stmt.bindString(11, door_frame_height);
        }
 
        String door_frame_width = entity.getDoor_frame_width();
        if (door_frame_width != null) {
            stmt.bindString(12, door_frame_width);
        }
 
        String door_leaf_width = entity.getDoor_leaf_width();
        if (door_leaf_width != null) {
            stmt.bindString(13, door_leaf_width);
        }
 
        String door_leaf_height = entity.getDoor_leaf_height();
        if (door_leaf_height != null) {
            stmt.bindString(14, door_leaf_height);
        }
 
        String door_leaf_thickness = entity.getDoor_leaf_thickness();
        if (door_leaf_thickness != null) {
            stmt.bindString(15, door_leaf_thickness);
        }
 
        String battenHeight = entity.getBattenHeight();
        if (battenHeight != null) {
            stmt.bindString(16, battenHeight);
        }
 
        String hangingPlateWidth = entity.getHangingPlateWidth();
        if (hangingPlateWidth != null) {
            stmt.bindString(17, hangingPlateWidth);
        }
 
        String hangingPlateWidthCenter = entity.getHangingPlateWidthCenter();
        if (hangingPlateWidthCenter != null) {
            stmt.bindString(18, hangingPlateWidthCenter);
        }
 
        String hangingPlateWidthBottom = entity.getHangingPlateWidthBottom();
        if (hangingPlateWidthBottom != null) {
            stmt.bindString(19, hangingPlateWidthBottom);
        }
 
        String hangingPlateHeight = entity.getHangingPlateHeight();
        if (hangingPlateHeight != null) {
            stmt.bindString(20, hangingPlateHeight);
        }
 
        String hangingPlateHeightCenter = entity.getHangingPlateHeightCenter();
        if (hangingPlateHeightCenter != null) {
            stmt.bindString(21, hangingPlateHeightCenter);
        }
 
        String hangingPlateHeightBottom = entity.getHangingPlateHeightBottom();
        if (hangingPlateHeightBottom != null) {
            stmt.bindString(22, hangingPlateHeightBottom);
        }
 
        String hingepageShaftDiameter = entity.getHingepageShaftDiameter();
        if (hingepageShaftDiameter != null) {
            stmt.bindString(23, hingepageShaftDiameter);
        }
 
        String hingepageHoleDiameter = entity.getHingepageHoleDiameter();
        if (hingepageHoleDiameter != null) {
            stmt.bindString(24, hingepageHoleDiameter);
        }
 
        String atresiaShaftDiameter = entity.getAtresiaShaftDiameter();
        if (atresiaShaftDiameter != null) {
            stmt.bindString(25, atresiaShaftDiameter);
        }
 
        String atresiaHoleDiameter = entity.getAtresiaHoleDiameter();
        if (atresiaHoleDiameter != null) {
            stmt.bindString(26, atresiaHoleDiameter);
        }
 
        String doorframeSteelThick = entity.getDoorframeSteelThick();
        if (doorframeSteelThick != null) {
            stmt.bindString(27, doorframeSteelThick);
        }
 
        String steelPlatePositive = entity.getSteelPlatePositive();
        if (steelPlatePositive != null) {
            stmt.bindString(28, steelPlatePositive);
        }
 
        String steelPlateOpposite = entity.getSteelPlateOpposite();
        if (steelPlateOpposite != null) {
            stmt.bindString(29, steelPlateOpposite);
        }
 
        String legHeightAcross = entity.getLegHeightAcross();
        if (legHeightAcross != null) {
            stmt.bindString(30, legHeightAcross);
        }
 
        String strength = entity.getStrength();
        if (strength != null) {
            stmt.bindString(31, strength);
        }
 
        String steelbarProtectThick = entity.getSteelbarProtectThick();
        if (steelbarProtectThick != null) {
            stmt.bindString(32, steelbarProtectThick);
        }
 
        String steelbarSpacing = entity.getSteelbarSpacing();
        if (steelbarSpacing != null) {
            stmt.bindString(33, steelbarSpacing);
        }
 
        String barDiameterDesignValue = entity.getBarDiameterDesignValue();
        if (barDiameterDesignValue != null) {
            stmt.bindString(34, barDiameterDesignValue);
        }
 
        String doorLeafBaseVentWidth = entity.getDoorLeafBaseVentWidth();
        if (doorLeafBaseVentWidth != null) {
            stmt.bindString(35, doorLeafBaseVentWidth);
        }
 
        String doorLeafBaseVentHeight = entity.getDoorLeafBaseVentHeight();
        if (doorLeafBaseVentHeight != null) {
            stmt.bindString(36, doorLeafBaseVentHeight);
        }
 
        String hangingPlateThicknessTop = entity.getHangingPlateThicknessTop();
        if (hangingPlateThicknessTop != null) {
            stmt.bindString(37, hangingPlateThicknessTop);
        }
 
        String hangingPlateThicknessBottom = entity.getHangingPlateThicknessBottom();
        if (hangingPlateThicknessBottom != null) {
            stmt.bindString(38, hangingPlateThicknessBottom);
        }
 
        String steelPlantThickness = entity.getSteelPlantThickness();
        if (steelPlantThickness != null) {
            stmt.bindString(39, steelPlantThickness);
        }
 
        String equivalent_pipe_diameter = entity.getEquivalent_pipe_diameter();
        if (equivalent_pipe_diameter != null) {
            stmt.bindString(40, equivalent_pipe_diameter);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SampleOriginal readEntity(Cursor cursor, int offset) {
        SampleOriginal entity = new SampleOriginal( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // sid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // number
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // smode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // unit
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // itemName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // productionDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // categotyCode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // testDate
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // door_frame_height
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // door_frame_width
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // door_leaf_width
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // door_leaf_height
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // door_leaf_thickness
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // battenHeight
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // hangingPlateWidth
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // hangingPlateWidthCenter
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // hangingPlateWidthBottom
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // hangingPlateHeight
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // hangingPlateHeightCenter
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // hangingPlateHeightBottom
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // hingepageShaftDiameter
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // hingepageHoleDiameter
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // atresiaShaftDiameter
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // atresiaHoleDiameter
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // doorframeSteelThick
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // steelPlatePositive
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // steelPlateOpposite
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // legHeightAcross
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // strength
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // steelbarProtectThick
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // steelbarSpacing
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // barDiameterDesignValue
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // doorLeafBaseVentWidth
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // doorLeafBaseVentHeight
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // hangingPlateThicknessTop
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // hangingPlateThicknessBottom
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // steelPlantThickness
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39) // equivalent_pipe_diameter
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SampleOriginal entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSid(cursor.getLong(offset + 1));
        entity.setNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSmode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUnit(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setItemName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setProductionDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCategotyCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTestDate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDoor_frame_height(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDoor_frame_width(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDoor_leaf_width(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDoor_leaf_height(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDoor_leaf_thickness(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setBattenHeight(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setHangingPlateWidth(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setHangingPlateWidthCenter(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setHangingPlateWidthBottom(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setHangingPlateHeight(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setHangingPlateHeightCenter(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setHangingPlateHeightBottom(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setHingepageShaftDiameter(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setHingepageHoleDiameter(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setAtresiaShaftDiameter(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setAtresiaHoleDiameter(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setDoorframeSteelThick(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setSteelPlatePositive(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setSteelPlateOpposite(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setLegHeightAcross(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setStrength(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setSteelbarProtectThick(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setSteelbarSpacing(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setBarDiameterDesignValue(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setDoorLeafBaseVentWidth(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setDoorLeafBaseVentHeight(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setHangingPlateThicknessTop(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setHangingPlateThicknessBottom(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setSteelPlantThickness(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setEquivalent_pipe_diameter(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SampleOriginal entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SampleOriginal entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SampleOriginal entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
