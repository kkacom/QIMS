package com.zhilian.rf_qims.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhilian.rf_qims.entity.CheckUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHECK_USER".
*/
public class CheckUserDao extends AbstractDao<CheckUser, Long> {

    public static final String TABLENAME = "CHECK_USER";

    /**
     * Properties of entity CheckUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property NAME = new Property(0, String.class, "NAME", false, "NAME");
        public final static Property ID = new Property(1, Long.class, "ID", true, "_id");
    }


    public CheckUserDao(DaoConfig config) {
        super(config);
    }
    
    public CheckUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHECK_USER\" (" + //
                "\"NAME\" TEXT," + // 0: NAME
                "\"_id\" INTEGER PRIMARY KEY );"); // 1: ID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHECK_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CheckUser entity) {
        stmt.clearBindings();
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(1, NAME);
        }
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(2, ID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CheckUser entity) {
        stmt.clearBindings();
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(1, NAME);
        }
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(2, ID);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
    }    

    @Override
    public CheckUser readEntity(Cursor cursor, int offset) {
        CheckUser entity = new CheckUser( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // NAME
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1) // ID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CheckUser entity, int offset) {
        entity.setNAME(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CheckUser entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CheckUser entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CheckUser entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
