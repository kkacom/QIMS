package com.zhilian.rf_qims.mvp.main.view;

import android.content.Intent;
import android.support.v4.app.ActivityOptionsCompat;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.GridView;

import com.alibaba.fastjson.JSON;
import com.colin.http.HttpServiceManager;
import com.colin.http.HttpUtil;
import com.zhilian.rf_qims.R;
import com.zhilian.rf_qims.adapter.WorkGridAdapter;
import com.zhilian.rf_qims.base.BaseActivity;
import com.zhilian.rf_qims.bean.AreaBean;
import com.zhilian.rf_qims.bean.WorkResBean;
import com.zhilian.rf_qims.dao.GreenDaoManager;
import com.zhilian.rf_qims.entity.AreaMes;
import com.zhilian.rf_qims.entity.CheckUser;
import com.zhilian.rf_qims.entity.Model;
import com.zhilian.rf_qims.mvp.login.view.LoginActivity;
import com.zhilian.rf_qims.mvp.main.presenter.MainPresenter;
import com.zhilian.rf_qims.mvp.project_manager.view.ProjectManagerActivity;
import com.zhilian.rf_qims.widget.DialogProgress;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import butterknife.BindView;
import io.reactivex.android.schedulers.AndroidSchedulers;
import io.reactivex.functions.Consumer;
import io.reactivex.schedulers.Schedulers;
import okhttp3.ResponseBody;

/**
 * Created by Administrator on 2017-10-9.
 */

public class MainActivity extends BaseActivity<MainPresenter> implements IMainView<WorkResBean> {
    @BindView(R.id.function_list)
    GridView mFunctionList;
    @BindView(R.id.toolbar)
    Toolbar mToolbar;
    DialogProgress dialogProgress;

    @Override
    protected int loadLayoutResource() {
        return R.layout.activity_main;
    }

    @Override
    protected void initView() {

//        user = (UserInfo) getIntent().getExtras().getSerializable("user");
        dialogProgress = new DialogProgress(MainActivity.this, "正在初始化数据");
        dialogProgress.setCanceledOnTouchOutside(false);
        initToolBar();
        presenter.loadView();
        presenter.loadCacheData();
        mFunctionList.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                switch (i) {
                    case 0:
                        startActivity(new Intent(MainActivity.this, ProjectManagerActivity.class),
                                ActivityOptionsCompat.makeSceneTransitionAnimation(MainActivity.this).toBundle());
                        // finish();
                        break;
                    case 1:
                        getFileName();
                        break;
                    case 2:

                        break;
                    case 3:

                        break;
                    case 4:

                        break;
                    default:
                        break;
                }
            }
        });
        List<AreaMes> areaMesList = GreenDaoManager.getInstance().getNewSession().getAreaMesDao().loadAll();
        if (areaMesList.size() == 0) {
            dialogProgress.show();

            getAreaList();
        }
//        getModelList();

    }

    public void getAreaList() {
        Map<String, String> params = new HashMap<>();
        HttpServiceManager.getInstance()
                .getHttpService()
                .getServerData(HttpUtil.initUrl(), HttpUtil.initQueryParams("query", "getAreaList", params))
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Consumer<ResponseBody>() {
                    @Override
                    public void accept(ResponseBody responseBody) throws Exception {
                        String json = responseBody.string();
                        Log.d("server", "area--" + json);
                        List<AreaBean> areaBeens = JSON.parseArray(json, AreaBean.class);
                        for (int i = 0; i < areaBeens.size(); i++) {
                            AreaMes areaMes = new AreaMes(areaBeens.get(i).getID(), areaBeens.get(i).getFID(),
                                    areaBeens.get(i).getSTATUS(), areaBeens.get(i).getLEVEL(), areaBeens.get(i).getNAME());
                            GreenDaoManager.getInstance().getNewSession().getAreaMesDao().insert(areaMes);
                        }
                        getModelList();
                    }
                }, new Consumer<Throwable>() {
                    @Override
                    public void accept(Throwable throwable) throws Exception {
                        dialogProgress.dismiss();
                        Log.d("server", "area--" + throwable.getMessage());
                    }
                });
    }

    public void getModelList() {
        Map<String, String> params = new HashMap<>();
        HttpServiceManager.getInstance()
                .getHttpService()
                .getServerData(HttpUtil.initUrl(), HttpUtil.initQueryParams("query", "getModelList", params))
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Consumer<ResponseBody>() {
                    @Override
                    public void accept(ResponseBody responseBody) throws Exception {
                        String json = responseBody.string();
                        List<Model> modelBeens = JSON.parseArray(json, Model.class);
                        for (int i = 0; i < modelBeens.size(); i++) {
                            GreenDaoManager.getInstance().getNewSession().getModelDao().insert(modelBeens.get(i));
                        }
//                        dialogProgress.dismiss();

                        Log.d("server", "modellist--" + json);
                        getCheckUserList();
                    }
                }, new Consumer<Throwable>() {
                    @Override
                    public void accept(Throwable throwable) throws Exception {
                        Log.d("server", "modellist--" + throwable.getMessage());
                        dialogProgress.dismiss();
                    }
                });
    }

    private void getCheckUserList() {
        Map<String, String> params = new HashMap<>();
        HttpServiceManager.getInstance()
                .getHttpService()
                .getServerData(HttpUtil.initUrl(), HttpUtil.initQueryParams("query", "getUserList", params))
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Consumer<ResponseBody>() {
                    @Override
                    public void accept(ResponseBody responseBody) throws Exception {
                        String json = responseBody.string();
                        List<CheckUser> checkUsers = JSON.parseArray(json, CheckUser.class);
                        for (int i = 0; i < checkUsers.size(); i++) {
                            GreenDaoManager.getInstance().getNewSession().getCheckUserDao().insert(checkUsers.get(i));
                        }
                        dialogProgress.dismiss();
                        Log.d("server", "userllist--" + json);
                    }
                }, new Consumer<Throwable>() {
                    @Override
                    public void accept(Throwable throwable) throws Exception {
                        Log.d("server", "userlist--" + throwable.getMessage());
                        dialogProgress.dismiss();
                    }
                });
    }

    private void initToolBar() {
        setSupportActionBar(mToolbar);
        getSupportActionBar().setTitle(R.string.login_app_name);
        mToolbar.setLogo(R.mipmap.icon_logo_toolbar);
        mToolbar.setNavigationIcon(null);
        mToolbar.setOnMenuItemClickListener(new Toolbar.OnMenuItemClickListener() {
            @Override
            public boolean onMenuItemClick(MenuItem item) {
                switch (item.getItemId()) {
                    case R.id.destroy:
                        presenter.destroyUserPwd();
                        break;
                    case R.id.exit:
                        System.exit(0);
                        break;
                }
                return true;
            }
        });
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.work_toolbar, menu);
        return true;
    }

    @Override
    protected MainPresenter createPresenter() {
        return new MainPresenter(this);
    }


    @Override
    public void onRequestSuccessData(Object data) {

    }


    @Override
    public void initAdapter(List<WorkResBean> list) {
        WorkGridAdapter adapter = new WorkGridAdapter(list);
        mFunctionList.setAdapter(adapter);
    }

    @Override
    public void reLogin() {
        Intent intent = new Intent(this, LoginActivity.class);
        startActivity(intent);
        finish();
    }

    public void getFileName(){
        Map<String, String> params =new HashMap<>();
        params.put("type","2");//1是报告 //2是原始记录
        params.put("id","21");//样品id
        HttpServiceManager.getInstance()
                .getHttpService()
                .getServerData(HttpUtil.initUrl(), HttpUtil.initQueryParams("query", "getFileName", params))
                .subscribeOn(Schedulers.newThread())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Consumer<ResponseBody>() {
                    @Override
                    public void accept(ResponseBody responseBody) throws Exception {
                        Log.d("upload", "获取名字" + responseBody.string());
                    }
                }, new Consumer<Throwable>() {
                    @Override
                    public void accept(Throwable throwable) throws Exception {
                        Log.d("upload", "获取名字" + throwable.getMessage());
                    }
                });
    }
}
