package com.zhilian.rf_qims.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhilian.rf_qims.entity.Sample;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SAMPLE".
*/
public class SampleDao extends AbstractDao<Sample, Long> {

    public static final String TABLENAME = "SAMPLE";

    /**
     * Properties of entity Sample.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Addr = new Property(1, String.class, "addr", false, "ADDR");
        public final static Property Part = new Property(2, String.class, "part", false, "PART");
        public final static Property SampleModel = new Property(3, String.class, "sampleModel", false, "SAMPLE_MODEL");
        public final static Property MadeDate = new Property(4, String.class, "madeDate", false, "MADE_DATE");
        public final static Property InstallDate = new Property(5, String.class, "installDate", false, "INSTALL_DATE");
        public final static Property MadeNo = new Property(6, String.class, "madeNo", false, "MADE_NO");
        public final static Property CheckDate = new Property(7, String.class, "checkDate", false, "CHECK_DATE");
        public final static Property SampleNo = new Property(8, String.class, "sampleNo", false, "SAMPLE_NO");
        public final static Property SampleState = new Property(9, String.class, "sampleState", false, "SAMPLE_STATE");
        public final static Property SampleType = new Property(10, String.class, "sampleType", false, "SAMPLE_TYPE");
        public final static Property InstallAddr = new Property(11, String.class, "installAddr", false, "INSTALL_ADDR");
        public final static Property Temperature = new Property(12, String.class, "temperature", false, "TEMPERATURE");
        public final static Property Humidity = new Property(13, String.class, "humidity", false, "HUMIDITY");
        public final static Property Desc = new Property(14, String.class, "desc", false, "DESC");
        public final static Property Status = new Property(15, int.class, "status", false, "STATUS");
        public final static Property Pid = new Property(16, long.class, "pid", false, "PID");
        public final static Property Door_frame_height = new Property(17, String.class, "door_frame_height", false, "DOOR_FRAME_HEIGHT");
        public final static Property Door_frame_width = new Property(18, String.class, "door_frame_width", false, "DOOR_FRAME_WIDTH");
        public final static Property Door_leaf_width = new Property(19, String.class, "door_leaf_width", false, "DOOR_LEAF_WIDTH");
        public final static Property Door_leaf_height = new Property(20, String.class, "door_leaf_height", false, "DOOR_LEAF_HEIGHT");
        public final static Property Door_leaf_thickness = new Property(21, String.class, "door_leaf_thickness", false, "DOOR_LEAF_THICKNESS");
        public final static Property BattenHeight = new Property(22, String.class, "battenHeight", false, "BATTEN_HEIGHT");
        public final static Property HangingPlateWidth = new Property(23, String.class, "hangingPlateWidth", false, "HANGING_PLATE_WIDTH");
        public final static Property HangingPlateWidthCenter = new Property(24, String.class, "hangingPlateWidthCenter", false, "HANGING_PLATE_WIDTH_CENTER");
        public final static Property HangingPlateWidthBottom = new Property(25, String.class, "hangingPlateWidthBottom", false, "HANGING_PLATE_WIDTH_BOTTOM");
        public final static Property HangingPlateHeight = new Property(26, String.class, "hangingPlateHeight", false, "HANGING_PLATE_HEIGHT");
        public final static Property HangingPlateHeightCenter = new Property(27, String.class, "hangingPlateHeightCenter", false, "HANGING_PLATE_HEIGHT_CENTER");
        public final static Property HangingPlateHeightBottom = new Property(28, String.class, "hangingPlateHeightBottom", false, "HANGING_PLATE_HEIGHT_BOTTOM");
        public final static Property HingepageShaftDiameter = new Property(29, String.class, "hingepageShaftDiameter", false, "HINGEPAGE_SHAFT_DIAMETER");
        public final static Property HingepageHoleDiameter = new Property(30, String.class, "hingepageHoleDiameter", false, "HINGEPAGE_HOLE_DIAMETER");
        public final static Property AtresiaShaftDiameter = new Property(31, String.class, "atresiaShaftDiameter", false, "ATRESIA_SHAFT_DIAMETER");
        public final static Property AtresiaHoleDiameter = new Property(32, String.class, "atresiaHoleDiameter", false, "ATRESIA_HOLE_DIAMETER");
        public final static Property DoorframeSteelThick = new Property(33, String.class, "doorframeSteelThick", false, "DOORFRAME_STEEL_THICK");
        public final static Property SteelPlatePositive = new Property(34, String.class, "steelPlatePositive", false, "STEEL_PLATE_POSITIVE");
        public final static Property SteelPlateOpposite = new Property(35, String.class, "steelPlateOpposite", false, "STEEL_PLATE_OPPOSITE");
        public final static Property LegHeightAcross = new Property(36, String.class, "legHeightAcross", false, "LEG_HEIGHT_ACROSS");
        public final static Property Strength = new Property(37, String.class, "strength", false, "STRENGTH");
        public final static Property SteelbarProtectThick = new Property(38, String.class, "steelbarProtectThick", false, "STEELBAR_PROTECT_THICK");
        public final static Property SteelbarSpacing = new Property(39, String.class, "steelbarSpacing", false, "STEELBAR_SPACING");
        public final static Property BarDiameterDesignValue = new Property(40, String.class, "barDiameterDesignValue", false, "BAR_DIAMETER_DESIGN_VALUE");
        public final static Property DoorLeafBaseVentWidth = new Property(41, String.class, "doorLeafBaseVentWidth", false, "DOOR_LEAF_BASE_VENT_WIDTH");
        public final static Property DoorLeafBaseVentHeight = new Property(42, String.class, "doorLeafBaseVentHeight", false, "DOOR_LEAF_BASE_VENT_HEIGHT");
        public final static Property HangingPlateThicknessTop = new Property(43, String.class, "hangingPlateThicknessTop", false, "HANGING_PLATE_THICKNESS_TOP");
        public final static Property HangingPlateThicknessBottom = new Property(44, String.class, "hangingPlateThicknessBottom", false, "HANGING_PLATE_THICKNESS_BOTTOM");
        public final static Property SteelPlantThickness = new Property(45, String.class, "steelPlantThickness", false, "STEEL_PLANT_THICKNESS");
        public final static Property Equivalent_pipe_diameter = new Property(46, String.class, "equivalent_pipe_diameter", false, "EQUIVALENT_PIPE_DIAMETER");
        public final static Property Isselected = new Property(47, Integer.class, "isselected", false, "ISSELECTED");
    }


    public SampleDao(DaoConfig config) {
        super(config);
    }
    
    public SampleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SAMPLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ADDR\" TEXT," + // 1: addr
                "\"PART\" TEXT," + // 2: part
                "\"SAMPLE_MODEL\" TEXT," + // 3: sampleModel
                "\"MADE_DATE\" TEXT," + // 4: madeDate
                "\"INSTALL_DATE\" TEXT," + // 5: installDate
                "\"MADE_NO\" TEXT," + // 6: madeNo
                "\"CHECK_DATE\" TEXT," + // 7: checkDate
                "\"SAMPLE_NO\" TEXT," + // 8: sampleNo
                "\"SAMPLE_STATE\" TEXT," + // 9: sampleState
                "\"SAMPLE_TYPE\" TEXT," + // 10: sampleType
                "\"INSTALL_ADDR\" TEXT," + // 11: installAddr
                "\"TEMPERATURE\" TEXT," + // 12: temperature
                "\"HUMIDITY\" TEXT," + // 13: humidity
                "\"DESC\" TEXT," + // 14: desc
                "\"STATUS\" INTEGER NOT NULL ," + // 15: status
                "\"PID\" INTEGER NOT NULL ," + // 16: pid
                "\"DOOR_FRAME_HEIGHT\" TEXT," + // 17: door_frame_height
                "\"DOOR_FRAME_WIDTH\" TEXT," + // 18: door_frame_width
                "\"DOOR_LEAF_WIDTH\" TEXT," + // 19: door_leaf_width
                "\"DOOR_LEAF_HEIGHT\" TEXT," + // 20: door_leaf_height
                "\"DOOR_LEAF_THICKNESS\" TEXT," + // 21: door_leaf_thickness
                "\"BATTEN_HEIGHT\" TEXT," + // 22: battenHeight
                "\"HANGING_PLATE_WIDTH\" TEXT," + // 23: hangingPlateWidth
                "\"HANGING_PLATE_WIDTH_CENTER\" TEXT," + // 24: hangingPlateWidthCenter
                "\"HANGING_PLATE_WIDTH_BOTTOM\" TEXT," + // 25: hangingPlateWidthBottom
                "\"HANGING_PLATE_HEIGHT\" TEXT," + // 26: hangingPlateHeight
                "\"HANGING_PLATE_HEIGHT_CENTER\" TEXT," + // 27: hangingPlateHeightCenter
                "\"HANGING_PLATE_HEIGHT_BOTTOM\" TEXT," + // 28: hangingPlateHeightBottom
                "\"HINGEPAGE_SHAFT_DIAMETER\" TEXT," + // 29: hingepageShaftDiameter
                "\"HINGEPAGE_HOLE_DIAMETER\" TEXT," + // 30: hingepageHoleDiameter
                "\"ATRESIA_SHAFT_DIAMETER\" TEXT," + // 31: atresiaShaftDiameter
                "\"ATRESIA_HOLE_DIAMETER\" TEXT," + // 32: atresiaHoleDiameter
                "\"DOORFRAME_STEEL_THICK\" TEXT," + // 33: doorframeSteelThick
                "\"STEEL_PLATE_POSITIVE\" TEXT," + // 34: steelPlatePositive
                "\"STEEL_PLATE_OPPOSITE\" TEXT," + // 35: steelPlateOpposite
                "\"LEG_HEIGHT_ACROSS\" TEXT," + // 36: legHeightAcross
                "\"STRENGTH\" TEXT," + // 37: strength
                "\"STEELBAR_PROTECT_THICK\" TEXT," + // 38: steelbarProtectThick
                "\"STEELBAR_SPACING\" TEXT," + // 39: steelbarSpacing
                "\"BAR_DIAMETER_DESIGN_VALUE\" TEXT," + // 40: barDiameterDesignValue
                "\"DOOR_LEAF_BASE_VENT_WIDTH\" TEXT," + // 41: doorLeafBaseVentWidth
                "\"DOOR_LEAF_BASE_VENT_HEIGHT\" TEXT," + // 42: doorLeafBaseVentHeight
                "\"HANGING_PLATE_THICKNESS_TOP\" TEXT," + // 43: hangingPlateThicknessTop
                "\"HANGING_PLATE_THICKNESS_BOTTOM\" TEXT," + // 44: hangingPlateThicknessBottom
                "\"STEEL_PLANT_THICKNESS\" TEXT," + // 45: steelPlantThickness
                "\"EQUIVALENT_PIPE_DIAMETER\" TEXT," + // 46: equivalent_pipe_diameter
                "\"ISSELECTED\" INTEGER);"); // 47: isselected
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SAMPLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Sample entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String addr = entity.getAddr();
        if (addr != null) {
            stmt.bindString(2, addr);
        }
 
        String part = entity.getPart();
        if (part != null) {
            stmt.bindString(3, part);
        }
 
        String sampleModel = entity.getSampleModel();
        if (sampleModel != null) {
            stmt.bindString(4, sampleModel);
        }
 
        String madeDate = entity.getMadeDate();
        if (madeDate != null) {
            stmt.bindString(5, madeDate);
        }
 
        String installDate = entity.getInstallDate();
        if (installDate != null) {
            stmt.bindString(6, installDate);
        }
 
        String madeNo = entity.getMadeNo();
        if (madeNo != null) {
            stmt.bindString(7, madeNo);
        }
 
        String checkDate = entity.getCheckDate();
        if (checkDate != null) {
            stmt.bindString(8, checkDate);
        }
 
        String sampleNo = entity.getSampleNo();
        if (sampleNo != null) {
            stmt.bindString(9, sampleNo);
        }
 
        String sampleState = entity.getSampleState();
        if (sampleState != null) {
            stmt.bindString(10, sampleState);
        }
 
        String sampleType = entity.getSampleType();
        if (sampleType != null) {
            stmt.bindString(11, sampleType);
        }
 
        String installAddr = entity.getInstallAddr();
        if (installAddr != null) {
            stmt.bindString(12, installAddr);
        }
 
        String temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindString(13, temperature);
        }
 
        String humidity = entity.getHumidity();
        if (humidity != null) {
            stmt.bindString(14, humidity);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(15, desc);
        }
        stmt.bindLong(16, entity.getStatus());
        stmt.bindLong(17, entity.getPid());
 
        String door_frame_height = entity.getDoor_frame_height();
        if (door_frame_height != null) {
            stmt.bindString(18, door_frame_height);
        }
 
        String door_frame_width = entity.getDoor_frame_width();
        if (door_frame_width != null) {
            stmt.bindString(19, door_frame_width);
        }
 
        String door_leaf_width = entity.getDoor_leaf_width();
        if (door_leaf_width != null) {
            stmt.bindString(20, door_leaf_width);
        }
 
        String door_leaf_height = entity.getDoor_leaf_height();
        if (door_leaf_height != null) {
            stmt.bindString(21, door_leaf_height);
        }
 
        String door_leaf_thickness = entity.getDoor_leaf_thickness();
        if (door_leaf_thickness != null) {
            stmt.bindString(22, door_leaf_thickness);
        }
 
        String battenHeight = entity.getBattenHeight();
        if (battenHeight != null) {
            stmt.bindString(23, battenHeight);
        }
 
        String hangingPlateWidth = entity.getHangingPlateWidth();
        if (hangingPlateWidth != null) {
            stmt.bindString(24, hangingPlateWidth);
        }
 
        String hangingPlateWidthCenter = entity.getHangingPlateWidthCenter();
        if (hangingPlateWidthCenter != null) {
            stmt.bindString(25, hangingPlateWidthCenter);
        }
 
        String hangingPlateWidthBottom = entity.getHangingPlateWidthBottom();
        if (hangingPlateWidthBottom != null) {
            stmt.bindString(26, hangingPlateWidthBottom);
        }
 
        String hangingPlateHeight = entity.getHangingPlateHeight();
        if (hangingPlateHeight != null) {
            stmt.bindString(27, hangingPlateHeight);
        }
 
        String hangingPlateHeightCenter = entity.getHangingPlateHeightCenter();
        if (hangingPlateHeightCenter != null) {
            stmt.bindString(28, hangingPlateHeightCenter);
        }
 
        String hangingPlateHeightBottom = entity.getHangingPlateHeightBottom();
        if (hangingPlateHeightBottom != null) {
            stmt.bindString(29, hangingPlateHeightBottom);
        }
 
        String hingepageShaftDiameter = entity.getHingepageShaftDiameter();
        if (hingepageShaftDiameter != null) {
            stmt.bindString(30, hingepageShaftDiameter);
        }
 
        String hingepageHoleDiameter = entity.getHingepageHoleDiameter();
        if (hingepageHoleDiameter != null) {
            stmt.bindString(31, hingepageHoleDiameter);
        }
 
        String atresiaShaftDiameter = entity.getAtresiaShaftDiameter();
        if (atresiaShaftDiameter != null) {
            stmt.bindString(32, atresiaShaftDiameter);
        }
 
        String atresiaHoleDiameter = entity.getAtresiaHoleDiameter();
        if (atresiaHoleDiameter != null) {
            stmt.bindString(33, atresiaHoleDiameter);
        }
 
        String doorframeSteelThick = entity.getDoorframeSteelThick();
        if (doorframeSteelThick != null) {
            stmt.bindString(34, doorframeSteelThick);
        }
 
        String steelPlatePositive = entity.getSteelPlatePositive();
        if (steelPlatePositive != null) {
            stmt.bindString(35, steelPlatePositive);
        }
 
        String steelPlateOpposite = entity.getSteelPlateOpposite();
        if (steelPlateOpposite != null) {
            stmt.bindString(36, steelPlateOpposite);
        }
 
        String legHeightAcross = entity.getLegHeightAcross();
        if (legHeightAcross != null) {
            stmt.bindString(37, legHeightAcross);
        }
 
        String strength = entity.getStrength();
        if (strength != null) {
            stmt.bindString(38, strength);
        }
 
        String steelbarProtectThick = entity.getSteelbarProtectThick();
        if (steelbarProtectThick != null) {
            stmt.bindString(39, steelbarProtectThick);
        }
 
        String steelbarSpacing = entity.getSteelbarSpacing();
        if (steelbarSpacing != null) {
            stmt.bindString(40, steelbarSpacing);
        }
 
        String barDiameterDesignValue = entity.getBarDiameterDesignValue();
        if (barDiameterDesignValue != null) {
            stmt.bindString(41, barDiameterDesignValue);
        }
 
        String doorLeafBaseVentWidth = entity.getDoorLeafBaseVentWidth();
        if (doorLeafBaseVentWidth != null) {
            stmt.bindString(42, doorLeafBaseVentWidth);
        }
 
        String doorLeafBaseVentHeight = entity.getDoorLeafBaseVentHeight();
        if (doorLeafBaseVentHeight != null) {
            stmt.bindString(43, doorLeafBaseVentHeight);
        }
 
        String hangingPlateThicknessTop = entity.getHangingPlateThicknessTop();
        if (hangingPlateThicknessTop != null) {
            stmt.bindString(44, hangingPlateThicknessTop);
        }
 
        String hangingPlateThicknessBottom = entity.getHangingPlateThicknessBottom();
        if (hangingPlateThicknessBottom != null) {
            stmt.bindString(45, hangingPlateThicknessBottom);
        }
 
        String steelPlantThickness = entity.getSteelPlantThickness();
        if (steelPlantThickness != null) {
            stmt.bindString(46, steelPlantThickness);
        }
 
        String equivalent_pipe_diameter = entity.getEquivalent_pipe_diameter();
        if (equivalent_pipe_diameter != null) {
            stmt.bindString(47, equivalent_pipe_diameter);
        }
 
        Integer isselected = entity.getIsselected();
        if (isselected != null) {
            stmt.bindLong(48, isselected);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Sample entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String addr = entity.getAddr();
        if (addr != null) {
            stmt.bindString(2, addr);
        }
 
        String part = entity.getPart();
        if (part != null) {
            stmt.bindString(3, part);
        }
 
        String sampleModel = entity.getSampleModel();
        if (sampleModel != null) {
            stmt.bindString(4, sampleModel);
        }
 
        String madeDate = entity.getMadeDate();
        if (madeDate != null) {
            stmt.bindString(5, madeDate);
        }
 
        String installDate = entity.getInstallDate();
        if (installDate != null) {
            stmt.bindString(6, installDate);
        }
 
        String madeNo = entity.getMadeNo();
        if (madeNo != null) {
            stmt.bindString(7, madeNo);
        }
 
        String checkDate = entity.getCheckDate();
        if (checkDate != null) {
            stmt.bindString(8, checkDate);
        }
 
        String sampleNo = entity.getSampleNo();
        if (sampleNo != null) {
            stmt.bindString(9, sampleNo);
        }
 
        String sampleState = entity.getSampleState();
        if (sampleState != null) {
            stmt.bindString(10, sampleState);
        }
 
        String sampleType = entity.getSampleType();
        if (sampleType != null) {
            stmt.bindString(11, sampleType);
        }
 
        String installAddr = entity.getInstallAddr();
        if (installAddr != null) {
            stmt.bindString(12, installAddr);
        }
 
        String temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindString(13, temperature);
        }
 
        String humidity = entity.getHumidity();
        if (humidity != null) {
            stmt.bindString(14, humidity);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(15, desc);
        }
        stmt.bindLong(16, entity.getStatus());
        stmt.bindLong(17, entity.getPid());
 
        String door_frame_height = entity.getDoor_frame_height();
        if (door_frame_height != null) {
            stmt.bindString(18, door_frame_height);
        }
 
        String door_frame_width = entity.getDoor_frame_width();
        if (door_frame_width != null) {
            stmt.bindString(19, door_frame_width);
        }
 
        String door_leaf_width = entity.getDoor_leaf_width();
        if (door_leaf_width != null) {
            stmt.bindString(20, door_leaf_width);
        }
 
        String door_leaf_height = entity.getDoor_leaf_height();
        if (door_leaf_height != null) {
            stmt.bindString(21, door_leaf_height);
        }
 
        String door_leaf_thickness = entity.getDoor_leaf_thickness();
        if (door_leaf_thickness != null) {
            stmt.bindString(22, door_leaf_thickness);
        }
 
        String battenHeight = entity.getBattenHeight();
        if (battenHeight != null) {
            stmt.bindString(23, battenHeight);
        }
 
        String hangingPlateWidth = entity.getHangingPlateWidth();
        if (hangingPlateWidth != null) {
            stmt.bindString(24, hangingPlateWidth);
        }
 
        String hangingPlateWidthCenter = entity.getHangingPlateWidthCenter();
        if (hangingPlateWidthCenter != null) {
            stmt.bindString(25, hangingPlateWidthCenter);
        }
 
        String hangingPlateWidthBottom = entity.getHangingPlateWidthBottom();
        if (hangingPlateWidthBottom != null) {
            stmt.bindString(26, hangingPlateWidthBottom);
        }
 
        String hangingPlateHeight = entity.getHangingPlateHeight();
        if (hangingPlateHeight != null) {
            stmt.bindString(27, hangingPlateHeight);
        }
 
        String hangingPlateHeightCenter = entity.getHangingPlateHeightCenter();
        if (hangingPlateHeightCenter != null) {
            stmt.bindString(28, hangingPlateHeightCenter);
        }
 
        String hangingPlateHeightBottom = entity.getHangingPlateHeightBottom();
        if (hangingPlateHeightBottom != null) {
            stmt.bindString(29, hangingPlateHeightBottom);
        }
 
        String hingepageShaftDiameter = entity.getHingepageShaftDiameter();
        if (hingepageShaftDiameter != null) {
            stmt.bindString(30, hingepageShaftDiameter);
        }
 
        String hingepageHoleDiameter = entity.getHingepageHoleDiameter();
        if (hingepageHoleDiameter != null) {
            stmt.bindString(31, hingepageHoleDiameter);
        }
 
        String atresiaShaftDiameter = entity.getAtresiaShaftDiameter();
        if (atresiaShaftDiameter != null) {
            stmt.bindString(32, atresiaShaftDiameter);
        }
 
        String atresiaHoleDiameter = entity.getAtresiaHoleDiameter();
        if (atresiaHoleDiameter != null) {
            stmt.bindString(33, atresiaHoleDiameter);
        }
 
        String doorframeSteelThick = entity.getDoorframeSteelThick();
        if (doorframeSteelThick != null) {
            stmt.bindString(34, doorframeSteelThick);
        }
 
        String steelPlatePositive = entity.getSteelPlatePositive();
        if (steelPlatePositive != null) {
            stmt.bindString(35, steelPlatePositive);
        }
 
        String steelPlateOpposite = entity.getSteelPlateOpposite();
        if (steelPlateOpposite != null) {
            stmt.bindString(36, steelPlateOpposite);
        }
 
        String legHeightAcross = entity.getLegHeightAcross();
        if (legHeightAcross != null) {
            stmt.bindString(37, legHeightAcross);
        }
 
        String strength = entity.getStrength();
        if (strength != null) {
            stmt.bindString(38, strength);
        }
 
        String steelbarProtectThick = entity.getSteelbarProtectThick();
        if (steelbarProtectThick != null) {
            stmt.bindString(39, steelbarProtectThick);
        }
 
        String steelbarSpacing = entity.getSteelbarSpacing();
        if (steelbarSpacing != null) {
            stmt.bindString(40, steelbarSpacing);
        }
 
        String barDiameterDesignValue = entity.getBarDiameterDesignValue();
        if (barDiameterDesignValue != null) {
            stmt.bindString(41, barDiameterDesignValue);
        }
 
        String doorLeafBaseVentWidth = entity.getDoorLeafBaseVentWidth();
        if (doorLeafBaseVentWidth != null) {
            stmt.bindString(42, doorLeafBaseVentWidth);
        }
 
        String doorLeafBaseVentHeight = entity.getDoorLeafBaseVentHeight();
        if (doorLeafBaseVentHeight != null) {
            stmt.bindString(43, doorLeafBaseVentHeight);
        }
 
        String hangingPlateThicknessTop = entity.getHangingPlateThicknessTop();
        if (hangingPlateThicknessTop != null) {
            stmt.bindString(44, hangingPlateThicknessTop);
        }
 
        String hangingPlateThicknessBottom = entity.getHangingPlateThicknessBottom();
        if (hangingPlateThicknessBottom != null) {
            stmt.bindString(45, hangingPlateThicknessBottom);
        }
 
        String steelPlantThickness = entity.getSteelPlantThickness();
        if (steelPlantThickness != null) {
            stmt.bindString(46, steelPlantThickness);
        }
 
        String equivalent_pipe_diameter = entity.getEquivalent_pipe_diameter();
        if (equivalent_pipe_diameter != null) {
            stmt.bindString(47, equivalent_pipe_diameter);
        }
 
        Integer isselected = entity.getIsselected();
        if (isselected != null) {
            stmt.bindLong(48, isselected);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Sample readEntity(Cursor cursor, int offset) {
        Sample entity = new Sample( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // addr
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // part
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sampleModel
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // madeDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // installDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // madeNo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // checkDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sampleNo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // sampleState
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // sampleType
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // installAddr
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // temperature
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // humidity
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // desc
            cursor.getInt(offset + 15), // status
            cursor.getLong(offset + 16), // pid
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // door_frame_height
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // door_frame_width
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // door_leaf_width
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // door_leaf_height
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // door_leaf_thickness
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // battenHeight
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // hangingPlateWidth
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // hangingPlateWidthCenter
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // hangingPlateWidthBottom
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // hangingPlateHeight
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // hangingPlateHeightCenter
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // hangingPlateHeightBottom
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // hingepageShaftDiameter
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // hingepageHoleDiameter
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // atresiaShaftDiameter
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // atresiaHoleDiameter
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // doorframeSteelThick
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // steelPlatePositive
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // steelPlateOpposite
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // legHeightAcross
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // strength
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // steelbarProtectThick
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // steelbarSpacing
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // barDiameterDesignValue
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // doorLeafBaseVentWidth
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // doorLeafBaseVentHeight
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // hangingPlateThicknessTop
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // hangingPlateThicknessBottom
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // steelPlantThickness
            cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // equivalent_pipe_diameter
            cursor.isNull(offset + 47) ? null : cursor.getInt(offset + 47) // isselected
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Sample entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAddr(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPart(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSampleModel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMadeDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setInstallDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMadeNo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCheckDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSampleNo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSampleState(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSampleType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setInstallAddr(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTemperature(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setHumidity(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDesc(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setStatus(cursor.getInt(offset + 15));
        entity.setPid(cursor.getLong(offset + 16));
        entity.setDoor_frame_height(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setDoor_frame_width(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setDoor_leaf_width(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setDoor_leaf_height(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setDoor_leaf_thickness(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setBattenHeight(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setHangingPlateWidth(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setHangingPlateWidthCenter(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setHangingPlateWidthBottom(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setHangingPlateHeight(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setHangingPlateHeightCenter(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setHangingPlateHeightBottom(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setHingepageShaftDiameter(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setHingepageHoleDiameter(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setAtresiaShaftDiameter(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setAtresiaHoleDiameter(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setDoorframeSteelThick(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setSteelPlatePositive(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setSteelPlateOpposite(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setLegHeightAcross(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setStrength(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setSteelbarProtectThick(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setSteelbarSpacing(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setBarDiameterDesignValue(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setDoorLeafBaseVentWidth(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setDoorLeafBaseVentHeight(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setHangingPlateThicknessTop(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setHangingPlateThicknessBottom(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setSteelPlantThickness(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setEquivalent_pipe_diameter(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.setIsselected(cursor.isNull(offset + 47) ? null : cursor.getInt(offset + 47));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Sample entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Sample entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Sample entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
