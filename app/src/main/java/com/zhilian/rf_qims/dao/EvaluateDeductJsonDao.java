package com.zhilian.rf_qims.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhilian.rf_qims.entity.EvaluateDeductJson;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EVALUATE_DEDUCT_JSON".
*/
public class EvaluateDeductJsonDao extends AbstractDao<EvaluateDeductJson, Long> {

    public static final String TABLENAME = "EVALUATE_DEDUCT_JSON";

    /**
     * Properties of entity EvaluateDeductJson.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Eid = new Property(1, Integer.class, "eid", false, "EID");
        public final static Property Cid = new Property(2, Integer.class, "cid", false, "CID");
        public final static Property Item = new Property(3, String.class, "item", false, "ITEM");
        public final static Property Score = new Property(4, float.class, "score", false, "SCORE");
        public final static Property Dodate = new Property(5, java.util.Date.class, "dodate", false, "DODATE");
        public final static Property Unit_name = new Property(6, String.class, "unit_name", false, "UNIT_NAME");
        public final static Property Type = new Property(7, Integer.class, "type", false, "TYPE");
        public final static Property Status = new Property(8, Integer.class, "status", false, "STATUS");
        public final static Property Deduct_url = new Property(9, String.class, "deduct_url", false, "DEDUCT_URL");
        public final static Property Project_name = new Property(10, String.class, "project_name", false, "PROJECT_NAME");
        public final static Property Executable_unit = new Property(11, String.class, "executable_unit", false, "EXECUTABLE_UNIT");
        public final static Property Remark = new Property(12, String.class, "remark", false, "REMARK");
    }


    public EvaluateDeductJsonDao(DaoConfig config) {
        super(config);
    }
    
    public EvaluateDeductJsonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EVALUATE_DEDUCT_JSON\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"EID\" INTEGER," + // 1: eid
                "\"CID\" INTEGER," + // 2: cid
                "\"ITEM\" TEXT," + // 3: item
                "\"SCORE\" REAL NOT NULL ," + // 4: score
                "\"DODATE\" INTEGER," + // 5: dodate
                "\"UNIT_NAME\" TEXT," + // 6: unit_name
                "\"TYPE\" INTEGER," + // 7: type
                "\"STATUS\" INTEGER," + // 8: status
                "\"DEDUCT_URL\" TEXT," + // 9: deduct_url
                "\"PROJECT_NAME\" TEXT," + // 10: project_name
                "\"EXECUTABLE_UNIT\" TEXT," + // 11: executable_unit
                "\"REMARK\" TEXT);"); // 12: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EVALUATE_DEDUCT_JSON\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EvaluateDeductJson entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer eid = entity.getEid();
        if (eid != null) {
            stmt.bindLong(2, eid);
        }
 
        Integer cid = entity.getCid();
        if (cid != null) {
            stmt.bindLong(3, cid);
        }
 
        String item = entity.getItem();
        if (item != null) {
            stmt.bindString(4, item);
        }
        stmt.bindDouble(5, entity.getScore());
 
        java.util.Date dodate = entity.getDodate();
        if (dodate != null) {
            stmt.bindLong(6, dodate.getTime());
        }
 
        String unit_name = entity.getUnit_name();
        if (unit_name != null) {
            stmt.bindString(7, unit_name);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(8, type);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(9, status);
        }
 
        String deduct_url = entity.getDeduct_url();
        if (deduct_url != null) {
            stmt.bindString(10, deduct_url);
        }
 
        String project_name = entity.getProject_name();
        if (project_name != null) {
            stmt.bindString(11, project_name);
        }
 
        String executable_unit = entity.getExecutable_unit();
        if (executable_unit != null) {
            stmt.bindString(12, executable_unit);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(13, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EvaluateDeductJson entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer eid = entity.getEid();
        if (eid != null) {
            stmt.bindLong(2, eid);
        }
 
        Integer cid = entity.getCid();
        if (cid != null) {
            stmt.bindLong(3, cid);
        }
 
        String item = entity.getItem();
        if (item != null) {
            stmt.bindString(4, item);
        }
        stmt.bindDouble(5, entity.getScore());
 
        java.util.Date dodate = entity.getDodate();
        if (dodate != null) {
            stmt.bindLong(6, dodate.getTime());
        }
 
        String unit_name = entity.getUnit_name();
        if (unit_name != null) {
            stmt.bindString(7, unit_name);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(8, type);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(9, status);
        }
 
        String deduct_url = entity.getDeduct_url();
        if (deduct_url != null) {
            stmt.bindString(10, deduct_url);
        }
 
        String project_name = entity.getProject_name();
        if (project_name != null) {
            stmt.bindString(11, project_name);
        }
 
        String executable_unit = entity.getExecutable_unit();
        if (executable_unit != null) {
            stmt.bindString(12, executable_unit);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(13, remark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EvaluateDeductJson readEntity(Cursor cursor, int offset) {
        EvaluateDeductJson entity = new EvaluateDeductJson( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // eid
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // cid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // item
            cursor.getFloat(offset + 4), // score
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // dodate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // unit_name
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // type
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // status
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // deduct_url
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // project_name
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // executable_unit
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EvaluateDeductJson entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEid(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setCid(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setItem(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setScore(cursor.getFloat(offset + 4));
        entity.setDodate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setUnit_name(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setType(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setStatus(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setDeduct_url(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setProject_name(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setExecutable_unit(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRemark(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EvaluateDeductJson entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EvaluateDeductJson entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EvaluateDeductJson entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
