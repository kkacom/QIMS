package com.zhilian.rf_qims.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhilian.rf_qims.entity.PersonnelJson;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSONNEL_JSON".
*/
public class PersonnelJsonDao extends AbstractDao<PersonnelJson, Long> {

    public static final String TABLENAME = "PERSONNEL_JSON";

    /**
     * Properties of entity PersonnelJson.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property UPLOADSTATUS = new Property(1, int.class, "UPLOADSTATUS", false, "UPLOADSTATUS");
        public final static Property EID = new Property(2, Integer.class, "EID", false, "EID");
        public final static Property CID = new Property(3, Integer.class, "CID", false, "CID");
        public final static Property POST_TYPE = new Property(4, String.class, "POST_TYPE", false, "POST__TYPE");
        public final static Property PERNAME = new Property(5, String.class, "PERNAME", false, "PERNAME");
        public final static Property IDNUMBER = new Property(6, String.class, "IDNUMBER", false, "IDNUMBER");
        public final static Property CHOOSE = new Property(7, String.class, "CHOOSE", false, "CHOOSE");
        public final static Property SCORE = new Property(8, String.class, "SCORE", false, "SCORE");
        public final static Property STATUS = new Property(9, String.class, "STATUS", false, "STATUS");
        public final static Property REMARK = new Property(10, String.class, "REMARK", false, "REMARK");
        public final static Property PHONE = new Property(11, String.class, "PHONE", false, "PHONE");
        public final static Property HIREDATE = new Property(12, String.class, "HIREDATE", false, "HIREDATE");
        public final static Property PROFESSIONAL = new Property(13, String.class, "PROFESSIONAL", false, "PROFESSIONAL");
        public final static Property WORK_TYPE = new Property(14, Integer.class, "WORK_TYPE", false, "WORK__TYPE");
    }


    public PersonnelJsonDao(DaoConfig config) {
        super(config);
    }
    
    public PersonnelJsonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSONNEL_JSON\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"UPLOADSTATUS\" INTEGER NOT NULL ," + // 1: UPLOADSTATUS
                "\"EID\" INTEGER," + // 2: EID
                "\"CID\" INTEGER," + // 3: CID
                "\"POST__TYPE\" TEXT," + // 4: POST_TYPE
                "\"PERNAME\" TEXT," + // 5: PERNAME
                "\"IDNUMBER\" TEXT," + // 6: IDNUMBER
                "\"CHOOSE\" TEXT," + // 7: CHOOSE
                "\"SCORE\" TEXT," + // 8: SCORE
                "\"STATUS\" TEXT," + // 9: STATUS
                "\"REMARK\" TEXT," + // 10: REMARK
                "\"PHONE\" TEXT," + // 11: PHONE
                "\"HIREDATE\" TEXT," + // 12: HIREDATE
                "\"PROFESSIONAL\" TEXT," + // 13: PROFESSIONAL
                "\"WORK__TYPE\" INTEGER);"); // 14: WORK_TYPE
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSONNEL_JSON\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PersonnelJson entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getUPLOADSTATUS());
 
        Integer EID = entity.getEID();
        if (EID != null) {
            stmt.bindLong(3, EID);
        }
 
        Integer CID = entity.getCID();
        if (CID != null) {
            stmt.bindLong(4, CID);
        }
 
        String POST_TYPE = entity.getPOST_TYPE();
        if (POST_TYPE != null) {
            stmt.bindString(5, POST_TYPE);
        }
 
        String PERNAME = entity.getPERNAME();
        if (PERNAME != null) {
            stmt.bindString(6, PERNAME);
        }
 
        String IDNUMBER = entity.getIDNUMBER();
        if (IDNUMBER != null) {
            stmt.bindString(7, IDNUMBER);
        }
 
        String CHOOSE = entity.getCHOOSE();
        if (CHOOSE != null) {
            stmt.bindString(8, CHOOSE);
        }
 
        String SCORE = entity.getSCORE();
        if (SCORE != null) {
            stmt.bindString(9, SCORE);
        }
 
        String STATUS = entity.getSTATUS();
        if (STATUS != null) {
            stmt.bindString(10, STATUS);
        }
 
        String REMARK = entity.getREMARK();
        if (REMARK != null) {
            stmt.bindString(11, REMARK);
        }
 
        String PHONE = entity.getPHONE();
        if (PHONE != null) {
            stmt.bindString(12, PHONE);
        }
 
        String HIREDATE = entity.getHIREDATE();
        if (HIREDATE != null) {
            stmt.bindString(13, HIREDATE);
        }
 
        String PROFESSIONAL = entity.getPROFESSIONAL();
        if (PROFESSIONAL != null) {
            stmt.bindString(14, PROFESSIONAL);
        }
 
        Integer WORK_TYPE = entity.getWORK_TYPE();
        if (WORK_TYPE != null) {
            stmt.bindLong(15, WORK_TYPE);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PersonnelJson entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getUPLOADSTATUS());
 
        Integer EID = entity.getEID();
        if (EID != null) {
            stmt.bindLong(3, EID);
        }
 
        Integer CID = entity.getCID();
        if (CID != null) {
            stmt.bindLong(4, CID);
        }
 
        String POST_TYPE = entity.getPOST_TYPE();
        if (POST_TYPE != null) {
            stmt.bindString(5, POST_TYPE);
        }
 
        String PERNAME = entity.getPERNAME();
        if (PERNAME != null) {
            stmt.bindString(6, PERNAME);
        }
 
        String IDNUMBER = entity.getIDNUMBER();
        if (IDNUMBER != null) {
            stmt.bindString(7, IDNUMBER);
        }
 
        String CHOOSE = entity.getCHOOSE();
        if (CHOOSE != null) {
            stmt.bindString(8, CHOOSE);
        }
 
        String SCORE = entity.getSCORE();
        if (SCORE != null) {
            stmt.bindString(9, SCORE);
        }
 
        String STATUS = entity.getSTATUS();
        if (STATUS != null) {
            stmt.bindString(10, STATUS);
        }
 
        String REMARK = entity.getREMARK();
        if (REMARK != null) {
            stmt.bindString(11, REMARK);
        }
 
        String PHONE = entity.getPHONE();
        if (PHONE != null) {
            stmt.bindString(12, PHONE);
        }
 
        String HIREDATE = entity.getHIREDATE();
        if (HIREDATE != null) {
            stmt.bindString(13, HIREDATE);
        }
 
        String PROFESSIONAL = entity.getPROFESSIONAL();
        if (PROFESSIONAL != null) {
            stmt.bindString(14, PROFESSIONAL);
        }
 
        Integer WORK_TYPE = entity.getWORK_TYPE();
        if (WORK_TYPE != null) {
            stmt.bindLong(15, WORK_TYPE);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PersonnelJson readEntity(Cursor cursor, int offset) {
        PersonnelJson entity = new PersonnelJson( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getInt(offset + 1), // UPLOADSTATUS
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // EID
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // CID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // POST_TYPE
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // PERNAME
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // IDNUMBER
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // CHOOSE
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // SCORE
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // STATUS
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // REMARK
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // PHONE
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // HIREDATE
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // PROFESSIONAL
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14) // WORK_TYPE
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PersonnelJson entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUPLOADSTATUS(cursor.getInt(offset + 1));
        entity.setEID(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setCID(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setPOST_TYPE(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPERNAME(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIDNUMBER(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCHOOSE(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSCORE(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSTATUS(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setREMARK(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPHONE(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setHIREDATE(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPROFESSIONAL(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setWORK_TYPE(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PersonnelJson entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PersonnelJson entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PersonnelJson entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
