package com.zhilian.rf_qims.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhilian.rf_qims.entity.EntEquipmentJson;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ENT_EQUIPMENT_JSON".
*/
public class EntEquipmentJsonDao extends AbstractDao<EntEquipmentJson, Long> {

    public static final String TABLENAME = "ENT_EQUIPMENT_JSON";

    /**
     * Properties of entity EntEquipmentJson.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property UPLOADSTATUS = new Property(1, int.class, "UPLOADSTATUS", false, "UPLOADSTATUS");
        public final static Property EID = new Property(2, Integer.class, "EID", false, "EID");
        public final static Property CID = new Property(3, String.class, "CID", false, "CID");
        public final static Property ETYPE = new Property(4, String.class, "ETYPE", false, "ETYPE");
        public final static Property ENAME = new Property(5, String.class, "ENAME", false, "ENAME");
        public final static Property ECODE = new Property(6, String.class, "ECODE", false, "ECODE");
        public final static Property EMODEL = new Property(7, String.class, "EMODEL", false, "EMODEL");
        public final static Property SCORE = new Property(8, String.class, "SCORE", false, "SCORE");
        public final static Property CHOOSE = new Property(9, String.class, "CHOOSE", false, "CHOOSE");
        public final static Property REMARK = new Property(10, String.class, "REMARK", false, "REMARK");
        public final static Property FIELD = new Property(11, String.class, "FIELD", false, "FIELD");
    }


    public EntEquipmentJsonDao(DaoConfig config) {
        super(config);
    }
    
    public EntEquipmentJsonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ENT_EQUIPMENT_JSON\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"UPLOADSTATUS\" INTEGER NOT NULL ," + // 1: UPLOADSTATUS
                "\"EID\" INTEGER," + // 2: EID
                "\"CID\" TEXT," + // 3: CID
                "\"ETYPE\" TEXT," + // 4: ETYPE
                "\"ENAME\" TEXT," + // 5: ENAME
                "\"ECODE\" TEXT," + // 6: ECODE
                "\"EMODEL\" TEXT," + // 7: EMODEL
                "\"SCORE\" TEXT," + // 8: SCORE
                "\"CHOOSE\" TEXT," + // 9: CHOOSE
                "\"REMARK\" TEXT," + // 10: REMARK
                "\"FIELD\" TEXT);"); // 11: FIELD
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ENT_EQUIPMENT_JSON\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EntEquipmentJson entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getUPLOADSTATUS());
 
        Integer EID = entity.getEID();
        if (EID != null) {
            stmt.bindLong(3, EID);
        }
 
        String CID = entity.getCID();
        if (CID != null) {
            stmt.bindString(4, CID);
        }
 
        String ETYPE = entity.getETYPE();
        if (ETYPE != null) {
            stmt.bindString(5, ETYPE);
        }
 
        String ENAME = entity.getENAME();
        if (ENAME != null) {
            stmt.bindString(6, ENAME);
        }
 
        String ECODE = entity.getECODE();
        if (ECODE != null) {
            stmt.bindString(7, ECODE);
        }
 
        String EMODEL = entity.getEMODEL();
        if (EMODEL != null) {
            stmt.bindString(8, EMODEL);
        }
 
        String SCORE = entity.getSCORE();
        if (SCORE != null) {
            stmt.bindString(9, SCORE);
        }
 
        String CHOOSE = entity.getCHOOSE();
        if (CHOOSE != null) {
            stmt.bindString(10, CHOOSE);
        }
 
        String REMARK = entity.getREMARK();
        if (REMARK != null) {
            stmt.bindString(11, REMARK);
        }
 
        String FIELD = entity.getFIELD();
        if (FIELD != null) {
            stmt.bindString(12, FIELD);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EntEquipmentJson entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getUPLOADSTATUS());
 
        Integer EID = entity.getEID();
        if (EID != null) {
            stmt.bindLong(3, EID);
        }
 
        String CID = entity.getCID();
        if (CID != null) {
            stmt.bindString(4, CID);
        }
 
        String ETYPE = entity.getETYPE();
        if (ETYPE != null) {
            stmt.bindString(5, ETYPE);
        }
 
        String ENAME = entity.getENAME();
        if (ENAME != null) {
            stmt.bindString(6, ENAME);
        }
 
        String ECODE = entity.getECODE();
        if (ECODE != null) {
            stmt.bindString(7, ECODE);
        }
 
        String EMODEL = entity.getEMODEL();
        if (EMODEL != null) {
            stmt.bindString(8, EMODEL);
        }
 
        String SCORE = entity.getSCORE();
        if (SCORE != null) {
            stmt.bindString(9, SCORE);
        }
 
        String CHOOSE = entity.getCHOOSE();
        if (CHOOSE != null) {
            stmt.bindString(10, CHOOSE);
        }
 
        String REMARK = entity.getREMARK();
        if (REMARK != null) {
            stmt.bindString(11, REMARK);
        }
 
        String FIELD = entity.getFIELD();
        if (FIELD != null) {
            stmt.bindString(12, FIELD);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EntEquipmentJson readEntity(Cursor cursor, int offset) {
        EntEquipmentJson entity = new EntEquipmentJson( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getInt(offset + 1), // UPLOADSTATUS
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // EID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ETYPE
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ENAME
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ECODE
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // EMODEL
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // SCORE
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // CHOOSE
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // REMARK
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // FIELD
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EntEquipmentJson entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUPLOADSTATUS(cursor.getInt(offset + 1));
        entity.setEID(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setCID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setETYPE(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setENAME(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setECODE(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEMODEL(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSCORE(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCHOOSE(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setREMARK(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFIELD(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EntEquipmentJson entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EntEquipmentJson entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EntEquipmentJson entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
