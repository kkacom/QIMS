package com.zhilian.rf_qims.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhilian.rf_qims.entity.EvaluateStandardJson;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EVALUATE_STANDARD_JSON".
*/
public class EvaluateStandardJsonDao extends AbstractDao<EvaluateStandardJson, Long> {

    public static final String TABLENAME = "EVALUATE_STANDARD_JSON";

    /**
     * Properties of entity EvaluateStandardJson.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Sn = new Property(1, String.class, "sn", false, "SN");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Score = new Property(3, float.class, "score", false, "SCORE");
        public final static Property Number = new Property(4, Integer.class, "number", false, "NUMBER");
        public final static Property Each = new Property(5, String.class, "each", false, "EACH");
        public final static Property Level = new Property(6, Integer.class, "level", false, "LEVEL");
        public final static Property Memo = new Property(7, String.class, "memo", false, "MEMO");
        public final static Property Type = new Property(8, Integer.class, "type", false, "TYPE");
        public final static Property Score_type = new Property(9, Integer.class, "score_type", false, "SCORE_TYPE");
    }


    public EvaluateStandardJsonDao(DaoConfig config) {
        super(config);
    }
    
    public EvaluateStandardJsonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EVALUATE_STANDARD_JSON\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SN\" TEXT," + // 1: sn
                "\"TITLE\" TEXT," + // 2: title
                "\"SCORE\" REAL NOT NULL ," + // 3: score
                "\"NUMBER\" INTEGER," + // 4: number
                "\"EACH\" TEXT," + // 5: each
                "\"LEVEL\" INTEGER," + // 6: level
                "\"MEMO\" TEXT," + // 7: memo
                "\"TYPE\" INTEGER," + // 8: type
                "\"SCORE_TYPE\" INTEGER);"); // 9: score_type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EVALUATE_STANDARD_JSON\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EvaluateStandardJson entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sn = entity.getSn();
        if (sn != null) {
            stmt.bindString(2, sn);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
        stmt.bindDouble(4, entity.getScore());
 
        Integer number = entity.getNumber();
        if (number != null) {
            stmt.bindLong(5, number);
        }
 
        String each = entity.getEach();
        if (each != null) {
            stmt.bindString(6, each);
        }
 
        Integer level = entity.getLevel();
        if (level != null) {
            stmt.bindLong(7, level);
        }
 
        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(8, memo);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(9, type);
        }
 
        Integer score_type = entity.getScore_type();
        if (score_type != null) {
            stmt.bindLong(10, score_type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EvaluateStandardJson entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sn = entity.getSn();
        if (sn != null) {
            stmt.bindString(2, sn);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
        stmt.bindDouble(4, entity.getScore());
 
        Integer number = entity.getNumber();
        if (number != null) {
            stmt.bindLong(5, number);
        }
 
        String each = entity.getEach();
        if (each != null) {
            stmt.bindString(6, each);
        }
 
        Integer level = entity.getLevel();
        if (level != null) {
            stmt.bindLong(7, level);
        }
 
        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(8, memo);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(9, type);
        }
 
        Integer score_type = entity.getScore_type();
        if (score_type != null) {
            stmt.bindLong(10, score_type);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EvaluateStandardJson readEntity(Cursor cursor, int offset) {
        EvaluateStandardJson entity = new EvaluateStandardJson( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sn
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.getFloat(offset + 3), // score
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // number
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // each
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // level
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // memo
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // type
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // score_type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EvaluateStandardJson entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSn(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setScore(cursor.getFloat(offset + 3));
        entity.setNumber(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setEach(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLevel(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setMemo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setType(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setScore_type(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EvaluateStandardJson entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EvaluateStandardJson entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EvaluateStandardJson entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
