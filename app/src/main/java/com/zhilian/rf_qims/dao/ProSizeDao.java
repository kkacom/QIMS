package com.zhilian.rf_qims.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhilian.rf_qims.entity.ProSize;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRO_SIZE".
*/
public class ProSizeDao extends AbstractDao<ProSize, Long> {

    public static final String TABLENAME = "PRO_SIZE";

    /**
     * Properties of entity ProSize.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Rid = new Property(1, long.class, "rid", false, "RID");
        public final static Property Dk = new Property(2, String.class, "dk", false, "DK");
        public final static Property Dz = new Property(3, String.class, "dz", false, "DZ");
        public final static Property Xbm = new Property(4, String.class, "xbm", false, "XBM");
    }


    public ProSizeDao(DaoConfig config) {
        super(config);
    }
    
    public ProSizeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRO_SIZE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"RID\" INTEGER NOT NULL ," + // 1: rid
                "\"DK\" TEXT," + // 2: dk
                "\"DZ\" TEXT," + // 3: dz
                "\"XBM\" TEXT);"); // 4: xbm
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRO_SIZE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProSize entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getRid());
 
        String dk = entity.getDk();
        if (dk != null) {
            stmt.bindString(3, dk);
        }
 
        String dz = entity.getDz();
        if (dz != null) {
            stmt.bindString(4, dz);
        }
 
        String xbm = entity.getXbm();
        if (xbm != null) {
            stmt.bindString(5, xbm);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProSize entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getRid());
 
        String dk = entity.getDk();
        if (dk != null) {
            stmt.bindString(3, dk);
        }
 
        String dz = entity.getDz();
        if (dz != null) {
            stmt.bindString(4, dz);
        }
 
        String xbm = entity.getXbm();
        if (xbm != null) {
            stmt.bindString(5, xbm);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ProSize readEntity(Cursor cursor, int offset) {
        ProSize entity = new ProSize( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // rid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dk
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // dz
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // xbm
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProSize entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setRid(cursor.getLong(offset + 1));
        entity.setDk(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDz(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setXbm(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ProSize entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ProSize entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ProSize entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
