package com.zhilian.rf_qims.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhilian.rf_qims.entity.CaTestJson;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CA_TEST_JSON".
*/
public class CaTestJsonDao extends AbstractDao<CaTestJson, Long> {

    public static final String TABLENAME = "CA_TEST_JSON";

    /**
     * Properties of entity CaTestJson.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property CTID = new Property(1, Long.class, "CTID", false, "CTID");
        public final static Property UPLOADSTATUS = new Property(2, int.class, "UPLOADSTATUS", false, "UPLOADSTATUS");
        public final static Property CID = new Property(3, String.class, "CID", false, "CID");
        public final static Property ITEM = new Property(4, String.class, "ITEM", false, "ITEM");
        public final static Property SCORE = new Property(5, String.class, "SCORE", false, "SCORE");
        public final static Property CHOOSE = new Property(6, String.class, "CHOOSE", false, "CHOOSE");
        public final static Property REMARK = new Property(7, String.class, "REMARK", false, "REMARK");
        public final static Property STATUS = new Property(8, String.class, "STATUS", false, "STATUS");
        public final static Property FIELD1 = new Property(9, String.class, "FIELD1", false, "FIELD1");
        public final static Property FIELD2 = new Property(10, String.class, "FIELD2", false, "FIELD2");
        public final static Property FIELD3 = new Property(11, String.class, "FIELD3", false, "FIELD3");
        public final static Property WREMARK = new Property(12, String.class, "WREMARK", false, "WREMARK");
    }


    public CaTestJsonDao(DaoConfig config) {
        super(config);
    }
    
    public CaTestJsonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CA_TEST_JSON\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"CTID\" INTEGER," + // 1: CTID
                "\"UPLOADSTATUS\" INTEGER NOT NULL ," + // 2: UPLOADSTATUS
                "\"CID\" TEXT," + // 3: CID
                "\"ITEM\" TEXT," + // 4: ITEM
                "\"SCORE\" TEXT," + // 5: SCORE
                "\"CHOOSE\" TEXT," + // 6: CHOOSE
                "\"REMARK\" TEXT," + // 7: REMARK
                "\"STATUS\" TEXT," + // 8: STATUS
                "\"FIELD1\" TEXT," + // 9: FIELD1
                "\"FIELD2\" TEXT," + // 10: FIELD2
                "\"FIELD3\" TEXT," + // 11: FIELD3
                "\"WREMARK\" TEXT);"); // 12: WREMARK
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CA_TEST_JSON\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CaTestJson entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        Long CTID = entity.getCTID();
        if (CTID != null) {
            stmt.bindLong(2, CTID);
        }
        stmt.bindLong(3, entity.getUPLOADSTATUS());
 
        String CID = entity.getCID();
        if (CID != null) {
            stmt.bindString(4, CID);
        }
 
        String ITEM = entity.getITEM();
        if (ITEM != null) {
            stmt.bindString(5, ITEM);
        }
 
        String SCORE = entity.getSCORE();
        if (SCORE != null) {
            stmt.bindString(6, SCORE);
        }
 
        String CHOOSE = entity.getCHOOSE();
        if (CHOOSE != null) {
            stmt.bindString(7, CHOOSE);
        }
 
        String REMARK = entity.getREMARK();
        if (REMARK != null) {
            stmt.bindString(8, REMARK);
        }
 
        String STATUS = entity.getSTATUS();
        if (STATUS != null) {
            stmt.bindString(9, STATUS);
        }
 
        String FIELD1 = entity.getFIELD1();
        if (FIELD1 != null) {
            stmt.bindString(10, FIELD1);
        }
 
        String FIELD2 = entity.getFIELD2();
        if (FIELD2 != null) {
            stmt.bindString(11, FIELD2);
        }
 
        String FIELD3 = entity.getFIELD3();
        if (FIELD3 != null) {
            stmt.bindString(12, FIELD3);
        }
 
        String WREMARK = entity.getWREMARK();
        if (WREMARK != null) {
            stmt.bindString(13, WREMARK);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CaTestJson entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        Long CTID = entity.getCTID();
        if (CTID != null) {
            stmt.bindLong(2, CTID);
        }
        stmt.bindLong(3, entity.getUPLOADSTATUS());
 
        String CID = entity.getCID();
        if (CID != null) {
            stmt.bindString(4, CID);
        }
 
        String ITEM = entity.getITEM();
        if (ITEM != null) {
            stmt.bindString(5, ITEM);
        }
 
        String SCORE = entity.getSCORE();
        if (SCORE != null) {
            stmt.bindString(6, SCORE);
        }
 
        String CHOOSE = entity.getCHOOSE();
        if (CHOOSE != null) {
            stmt.bindString(7, CHOOSE);
        }
 
        String REMARK = entity.getREMARK();
        if (REMARK != null) {
            stmt.bindString(8, REMARK);
        }
 
        String STATUS = entity.getSTATUS();
        if (STATUS != null) {
            stmt.bindString(9, STATUS);
        }
 
        String FIELD1 = entity.getFIELD1();
        if (FIELD1 != null) {
            stmt.bindString(10, FIELD1);
        }
 
        String FIELD2 = entity.getFIELD2();
        if (FIELD2 != null) {
            stmt.bindString(11, FIELD2);
        }
 
        String FIELD3 = entity.getFIELD3();
        if (FIELD3 != null) {
            stmt.bindString(12, FIELD3);
        }
 
        String WREMARK = entity.getWREMARK();
        if (WREMARK != null) {
            stmt.bindString(13, WREMARK);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CaTestJson readEntity(Cursor cursor, int offset) {
        CaTestJson entity = new CaTestJson( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // CTID
            cursor.getInt(offset + 2), // UPLOADSTATUS
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ITEM
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // SCORE
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // CHOOSE
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // REMARK
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // STATUS
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // FIELD1
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // FIELD2
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // FIELD3
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // WREMARK
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CaTestJson entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCTID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUPLOADSTATUS(cursor.getInt(offset + 2));
        entity.setCID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setITEM(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSCORE(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCHOOSE(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setREMARK(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSTATUS(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFIELD1(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFIELD2(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFIELD3(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setWREMARK(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CaTestJson entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CaTestJson entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CaTestJson entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
