package com.zhilian.rf_qims.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhilian.rf_qims.entity.PhotoPath;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PHOTO_PATH".
*/
public class PhotoPathDao extends AbstractDao<PhotoPath, Long> {

    public static final String TABLENAME = "PHOTO_PATH";

    /**
     * Properties of entity PhotoPath.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Status = new Property(1, String.class, "status", false, "STATUS");
        public final static Property UploadStatus = new Property(2, int.class, "uploadStatus", false, "UPLOAD_STATUS");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property Relid = new Property(4, String.class, "relid", false, "RELID");
        public final static Property Photo = new Property(5, String.class, "photo", false, "PHOTO");
        public final static Property PhotoPath = new Property(6, String.class, "photoPath", false, "PHOTO_PATH");
    }


    public PhotoPathDao(DaoConfig config) {
        super(config);
    }
    
    public PhotoPathDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PHOTO_PATH\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"STATUS\" TEXT," + // 1: status
                "\"UPLOAD_STATUS\" INTEGER NOT NULL ," + // 2: uploadStatus
                "\"TYPE\" TEXT," + // 3: type
                "\"RELID\" TEXT," + // 4: relid
                "\"PHOTO\" TEXT," + // 5: photo
                "\"PHOTO_PATH\" TEXT);"); // 6: photoPath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PHOTO_PATH\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PhotoPath entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(2, status);
        }
        stmt.bindLong(3, entity.getUploadStatus());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String relid = entity.getRelid();
        if (relid != null) {
            stmt.bindString(5, relid);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(6, photo);
        }
 
        String photoPath = entity.getPhotoPath();
        if (photoPath != null) {
            stmt.bindString(7, photoPath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PhotoPath entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(2, status);
        }
        stmt.bindLong(3, entity.getUploadStatus());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String relid = entity.getRelid();
        if (relid != null) {
            stmt.bindString(5, relid);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(6, photo);
        }
 
        String photoPath = entity.getPhotoPath();
        if (photoPath != null) {
            stmt.bindString(7, photoPath);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PhotoPath readEntity(Cursor cursor, int offset) {
        PhotoPath entity = new PhotoPath( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // status
            cursor.getInt(offset + 2), // uploadStatus
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // relid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // photo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // photoPath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PhotoPath entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStatus(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUploadStatus(cursor.getInt(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRelid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhoto(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhotoPath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PhotoPath entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PhotoPath entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PhotoPath entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
