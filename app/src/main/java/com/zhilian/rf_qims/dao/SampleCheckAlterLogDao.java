package com.zhilian.rf_qims.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhilian.rf_qims.entity.SampleCheckAlterLog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SAMPLE_CHECK_ALTER_LOG".
*/
public class SampleCheckAlterLogDao extends AbstractDao<SampleCheckAlterLog, Long> {

    public static final String TABLENAME = "SAMPLE_CHECK_ALTER_LOG";

    /**
     * Properties of entity SampleCheckAlterLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Statu = new Property(1, int.class, "statu", false, "STATU");
        public final static Property SampleCheckId = new Property(2, String.class, "sampleCheckId", false, "SAMPLE_CHECK_ID");
        public final static Property Field_name = new Property(3, String.class, "field_name", false, "FIELD_NAME");
        public final static Property Check_num = new Property(4, String.class, "check_num", false, "CHECK_NUM");
        public final static Property Change_num = new Property(5, String.class, "change_num", false, "CHANGE_NUM");
        public final static Property Change_reason = new Property(6, String.class, "change_reason", false, "CHANGE_REASON");
        public final static Property Check_time = new Property(7, String.class, "check_time", false, "CHECK_TIME");
        public final static Property Serial_number = new Property(8, String.class, "serial_number", false, "SERIAL_NUMBER");
        public final static Property Applicant = new Property(9, String.class, "applicant", false, "APPLICANT");
        public final static Property Sampleid = new Property(10, String.class, "sampleid", false, "SAMPLEID");
    }


    public SampleCheckAlterLogDao(DaoConfig config) {
        super(config);
    }
    
    public SampleCheckAlterLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SAMPLE_CHECK_ALTER_LOG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"STATU\" INTEGER NOT NULL ," + // 1: statu
                "\"SAMPLE_CHECK_ID\" TEXT," + // 2: sampleCheckId
                "\"FIELD_NAME\" TEXT," + // 3: field_name
                "\"CHECK_NUM\" TEXT," + // 4: check_num
                "\"CHANGE_NUM\" TEXT," + // 5: change_num
                "\"CHANGE_REASON\" TEXT," + // 6: change_reason
                "\"CHECK_TIME\" TEXT," + // 7: check_time
                "\"SERIAL_NUMBER\" TEXT," + // 8: serial_number
                "\"APPLICANT\" TEXT," + // 9: applicant
                "\"SAMPLEID\" TEXT);"); // 10: sampleid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SAMPLE_CHECK_ALTER_LOG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SampleCheckAlterLog entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStatu());
 
        String sampleCheckId = entity.getSampleCheckId();
        if (sampleCheckId != null) {
            stmt.bindString(3, sampleCheckId);
        }
 
        String field_name = entity.getField_name();
        if (field_name != null) {
            stmt.bindString(4, field_name);
        }
 
        String check_num = entity.getCheck_num();
        if (check_num != null) {
            stmt.bindString(5, check_num);
        }
 
        String change_num = entity.getChange_num();
        if (change_num != null) {
            stmt.bindString(6, change_num);
        }
 
        String change_reason = entity.getChange_reason();
        if (change_reason != null) {
            stmt.bindString(7, change_reason);
        }
 
        String check_time = entity.getCheck_time();
        if (check_time != null) {
            stmt.bindString(8, check_time);
        }
 
        String serial_number = entity.getSerial_number();
        if (serial_number != null) {
            stmt.bindString(9, serial_number);
        }
 
        String applicant = entity.getApplicant();
        if (applicant != null) {
            stmt.bindString(10, applicant);
        }
 
        String sampleid = entity.getSampleid();
        if (sampleid != null) {
            stmt.bindString(11, sampleid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SampleCheckAlterLog entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStatu());
 
        String sampleCheckId = entity.getSampleCheckId();
        if (sampleCheckId != null) {
            stmt.bindString(3, sampleCheckId);
        }
 
        String field_name = entity.getField_name();
        if (field_name != null) {
            stmt.bindString(4, field_name);
        }
 
        String check_num = entity.getCheck_num();
        if (check_num != null) {
            stmt.bindString(5, check_num);
        }
 
        String change_num = entity.getChange_num();
        if (change_num != null) {
            stmt.bindString(6, change_num);
        }
 
        String change_reason = entity.getChange_reason();
        if (change_reason != null) {
            stmt.bindString(7, change_reason);
        }
 
        String check_time = entity.getCheck_time();
        if (check_time != null) {
            stmt.bindString(8, check_time);
        }
 
        String serial_number = entity.getSerial_number();
        if (serial_number != null) {
            stmt.bindString(9, serial_number);
        }
 
        String applicant = entity.getApplicant();
        if (applicant != null) {
            stmt.bindString(10, applicant);
        }
 
        String sampleid = entity.getSampleid();
        if (sampleid != null) {
            stmt.bindString(11, sampleid);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SampleCheckAlterLog readEntity(Cursor cursor, int offset) {
        SampleCheckAlterLog entity = new SampleCheckAlterLog( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // statu
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sampleCheckId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // field_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // check_num
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // change_num
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // change_reason
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // check_time
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // serial_number
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // applicant
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // sampleid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SampleCheckAlterLog entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStatu(cursor.getInt(offset + 1));
        entity.setSampleCheckId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setField_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCheck_num(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setChange_num(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setChange_reason(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCheck_time(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSerial_number(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setApplicant(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSampleid(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SampleCheckAlterLog entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SampleCheckAlterLog entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SampleCheckAlterLog entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
