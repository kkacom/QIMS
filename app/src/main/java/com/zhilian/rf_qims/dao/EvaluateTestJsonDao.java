package com.zhilian.rf_qims.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhilian.rf_qims.entity.EvaluateTestJson;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EVALUATE_TEST_JSON".
*/
public class EvaluateTestJsonDao extends AbstractDao<EvaluateTestJson, Long> {

    public static final String TABLENAME = "EVALUATE_TEST_JSON";

    /**
     * Properties of entity EvaluateTestJson.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Oid = new Property(1, Integer.class, "oid", false, "OID");
        public final static Property Cid = new Property(2, Integer.class, "cid", false, "CID");
        public final static Property Eid = new Property(3, Integer.class, "eid", false, "EID");
        public final static Property Item = new Property(4, String.class, "item", false, "ITEM");
        public final static Property Mark = new Property(5, float.class, "mark", false, "MARK");
        public final static Property Wremark = new Property(6, String.class, "wremark", false, "WREMARK");
        public final static Property Unit_name = new Property(7, String.class, "unit_name", false, "UNIT_NAME");
        public final static Property Type = new Property(8, Integer.class, "type", false, "TYPE");
        public final static Property Audit_mark = new Property(9, float.class, "audit_mark", false, "AUDIT_MARK");
        public final static Property Level = new Property(10, Integer.class, "level", false, "LEVEL");
        public final static Property Score_type = new Property(11, Integer.class, "score_type", false, "SCORE_TYPE");
        public final static Property Eremark = new Property(12, String.class, "eremark", false, "EREMARK");
    }


    public EvaluateTestJsonDao(DaoConfig config) {
        super(config);
    }
    
    public EvaluateTestJsonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EVALUATE_TEST_JSON\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"OID\" INTEGER," + // 1: oid
                "\"CID\" INTEGER," + // 2: cid
                "\"EID\" INTEGER," + // 3: eid
                "\"ITEM\" TEXT," + // 4: item
                "\"MARK\" REAL NOT NULL ," + // 5: mark
                "\"WREMARK\" TEXT," + // 6: wremark
                "\"UNIT_NAME\" TEXT," + // 7: unit_name
                "\"TYPE\" INTEGER," + // 8: type
                "\"AUDIT_MARK\" REAL NOT NULL ," + // 9: audit_mark
                "\"LEVEL\" INTEGER," + // 10: level
                "\"SCORE_TYPE\" INTEGER," + // 11: score_type
                "\"EREMARK\" TEXT);"); // 12: eremark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EVALUATE_TEST_JSON\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EvaluateTestJson entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer oid = entity.getOid();
        if (oid != null) {
            stmt.bindLong(2, oid);
        }
 
        Integer cid = entity.getCid();
        if (cid != null) {
            stmt.bindLong(3, cid);
        }
 
        Integer eid = entity.getEid();
        if (eid != null) {
            stmt.bindLong(4, eid);
        }
 
        String item = entity.getItem();
        if (item != null) {
            stmt.bindString(5, item);
        }
        stmt.bindDouble(6, entity.getMark());
 
        String wremark = entity.getWremark();
        if (wremark != null) {
            stmt.bindString(7, wremark);
        }
 
        String unit_name = entity.getUnit_name();
        if (unit_name != null) {
            stmt.bindString(8, unit_name);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(9, type);
        }
        stmt.bindDouble(10, entity.getAudit_mark());
 
        Integer level = entity.getLevel();
        if (level != null) {
            stmt.bindLong(11, level);
        }
 
        Integer score_type = entity.getScore_type();
        if (score_type != null) {
            stmt.bindLong(12, score_type);
        }
 
        String eremark = entity.getEremark();
        if (eremark != null) {
            stmt.bindString(13, eremark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EvaluateTestJson entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer oid = entity.getOid();
        if (oid != null) {
            stmt.bindLong(2, oid);
        }
 
        Integer cid = entity.getCid();
        if (cid != null) {
            stmt.bindLong(3, cid);
        }
 
        Integer eid = entity.getEid();
        if (eid != null) {
            stmt.bindLong(4, eid);
        }
 
        String item = entity.getItem();
        if (item != null) {
            stmt.bindString(5, item);
        }
        stmt.bindDouble(6, entity.getMark());
 
        String wremark = entity.getWremark();
        if (wremark != null) {
            stmt.bindString(7, wremark);
        }
 
        String unit_name = entity.getUnit_name();
        if (unit_name != null) {
            stmt.bindString(8, unit_name);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(9, type);
        }
        stmt.bindDouble(10, entity.getAudit_mark());
 
        Integer level = entity.getLevel();
        if (level != null) {
            stmt.bindLong(11, level);
        }
 
        Integer score_type = entity.getScore_type();
        if (score_type != null) {
            stmt.bindLong(12, score_type);
        }
 
        String eremark = entity.getEremark();
        if (eremark != null) {
            stmt.bindString(13, eremark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EvaluateTestJson readEntity(Cursor cursor, int offset) {
        EvaluateTestJson entity = new EvaluateTestJson( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // oid
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // cid
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // eid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // item
            cursor.getFloat(offset + 5), // mark
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // wremark
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // unit_name
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // type
            cursor.getFloat(offset + 9), // audit_mark
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // level
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // score_type
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // eremark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EvaluateTestJson entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOid(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setCid(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setEid(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setItem(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMark(cursor.getFloat(offset + 5));
        entity.setWremark(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUnit_name(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setType(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setAudit_mark(cursor.getFloat(offset + 9));
        entity.setLevel(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setScore_type(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setEremark(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EvaluateTestJson entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EvaluateTestJson entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EvaluateTestJson entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
